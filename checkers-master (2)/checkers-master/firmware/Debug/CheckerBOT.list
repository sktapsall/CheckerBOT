
CheckerBOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004464  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  080045f0  080045f0  000145f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004728  08004728  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004728  08004728  00014728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004730  08004730  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004730  08004730  00014730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004734  08004734  00014734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004738  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  08004744  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08004744  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f884  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001efb  00000000  00000000  0002f8c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ea8  00000000  00000000  000317c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d90  00000000  00000000  00032668  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021562  00000000  00000000  000333f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c608  00000000  00000000  0005495a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb7d7  00000000  00000000  00060f62  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012c739  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dcc  00000000  00000000  0012c7b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080045d8 	.word	0x080045d8

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080045d8 	.word	0x080045d8

080001cc <__aeabi_drsub>:
 80001cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d0:	e002      	b.n	80001d8 <__adddf3>
 80001d2:	bf00      	nop

080001d4 <__aeabi_dsub>:
 80001d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d8 <__adddf3>:
 80001d8:	b530      	push	{r4, r5, lr}
 80001da:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001de:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e2:	ea94 0f05 	teq	r4, r5
 80001e6:	bf08      	it	eq
 80001e8:	ea90 0f02 	teqeq	r0, r2
 80001ec:	bf1f      	itttt	ne
 80001ee:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fe:	f000 80e2 	beq.w	80003c6 <__adddf3+0x1ee>
 8000202:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000206:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020a:	bfb8      	it	lt
 800020c:	426d      	neglt	r5, r5
 800020e:	dd0c      	ble.n	800022a <__adddf3+0x52>
 8000210:	442c      	add	r4, r5
 8000212:	ea80 0202 	eor.w	r2, r0, r2
 8000216:	ea81 0303 	eor.w	r3, r1, r3
 800021a:	ea82 0000 	eor.w	r0, r2, r0
 800021e:	ea83 0101 	eor.w	r1, r3, r1
 8000222:	ea80 0202 	eor.w	r2, r0, r2
 8000226:	ea81 0303 	eor.w	r3, r1, r3
 800022a:	2d36      	cmp	r5, #54	; 0x36
 800022c:	bf88      	it	hi
 800022e:	bd30      	pophi	{r4, r5, pc}
 8000230:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000234:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000238:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800023c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000240:	d002      	beq.n	8000248 <__adddf3+0x70>
 8000242:	4240      	negs	r0, r0
 8000244:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000248:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800024c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000250:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x84>
 8000256:	4252      	negs	r2, r2
 8000258:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800025c:	ea94 0f05 	teq	r4, r5
 8000260:	f000 80a7 	beq.w	80003b2 <__adddf3+0x1da>
 8000264:	f1a4 0401 	sub.w	r4, r4, #1
 8000268:	f1d5 0e20 	rsbs	lr, r5, #32
 800026c:	db0d      	blt.n	800028a <__adddf3+0xb2>
 800026e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000272:	fa22 f205 	lsr.w	r2, r2, r5
 8000276:	1880      	adds	r0, r0, r2
 8000278:	f141 0100 	adc.w	r1, r1, #0
 800027c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000280:	1880      	adds	r0, r0, r2
 8000282:	fa43 f305 	asr.w	r3, r3, r5
 8000286:	4159      	adcs	r1, r3
 8000288:	e00e      	b.n	80002a8 <__adddf3+0xd0>
 800028a:	f1a5 0520 	sub.w	r5, r5, #32
 800028e:	f10e 0e20 	add.w	lr, lr, #32
 8000292:	2a01      	cmp	r2, #1
 8000294:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000298:	bf28      	it	cs
 800029a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	18c0      	adds	r0, r0, r3
 80002a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002ac:	d507      	bpl.n	80002be <__adddf3+0xe6>
 80002ae:	f04f 0e00 	mov.w	lr, #0
 80002b2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ba:	eb6e 0101 	sbc.w	r1, lr, r1
 80002be:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c2:	d31b      	bcc.n	80002fc <__adddf3+0x124>
 80002c4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c8:	d30c      	bcc.n	80002e4 <__adddf3+0x10c>
 80002ca:	0849      	lsrs	r1, r1, #1
 80002cc:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d4:	f104 0401 	add.w	r4, r4, #1
 80002d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002dc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e0:	f080 809a 	bcs.w	8000418 <__adddf3+0x240>
 80002e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e8:	bf08      	it	eq
 80002ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ee:	f150 0000 	adcs.w	r0, r0, #0
 80002f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f6:	ea41 0105 	orr.w	r1, r1, r5
 80002fa:	bd30      	pop	{r4, r5, pc}
 80002fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000300:	4140      	adcs	r0, r0
 8000302:	eb41 0101 	adc.w	r1, r1, r1
 8000306:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030a:	f1a4 0401 	sub.w	r4, r4, #1
 800030e:	d1e9      	bne.n	80002e4 <__adddf3+0x10c>
 8000310:	f091 0f00 	teq	r1, #0
 8000314:	bf04      	itt	eq
 8000316:	4601      	moveq	r1, r0
 8000318:	2000      	moveq	r0, #0
 800031a:	fab1 f381 	clz	r3, r1
 800031e:	bf08      	it	eq
 8000320:	3320      	addeq	r3, #32
 8000322:	f1a3 030b 	sub.w	r3, r3, #11
 8000326:	f1b3 0220 	subs.w	r2, r3, #32
 800032a:	da0c      	bge.n	8000346 <__adddf3+0x16e>
 800032c:	320c      	adds	r2, #12
 800032e:	dd08      	ble.n	8000342 <__adddf3+0x16a>
 8000330:	f102 0c14 	add.w	ip, r2, #20
 8000334:	f1c2 020c 	rsb	r2, r2, #12
 8000338:	fa01 f00c 	lsl.w	r0, r1, ip
 800033c:	fa21 f102 	lsr.w	r1, r1, r2
 8000340:	e00c      	b.n	800035c <__adddf3+0x184>
 8000342:	f102 0214 	add.w	r2, r2, #20
 8000346:	bfd8      	it	le
 8000348:	f1c2 0c20 	rsble	ip, r2, #32
 800034c:	fa01 f102 	lsl.w	r1, r1, r2
 8000350:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000354:	bfdc      	itt	le
 8000356:	ea41 010c 	orrle.w	r1, r1, ip
 800035a:	4090      	lslle	r0, r2
 800035c:	1ae4      	subs	r4, r4, r3
 800035e:	bfa2      	ittt	ge
 8000360:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000364:	4329      	orrge	r1, r5
 8000366:	bd30      	popge	{r4, r5, pc}
 8000368:	ea6f 0404 	mvn.w	r4, r4
 800036c:	3c1f      	subs	r4, #31
 800036e:	da1c      	bge.n	80003aa <__adddf3+0x1d2>
 8000370:	340c      	adds	r4, #12
 8000372:	dc0e      	bgt.n	8000392 <__adddf3+0x1ba>
 8000374:	f104 0414 	add.w	r4, r4, #20
 8000378:	f1c4 0220 	rsb	r2, r4, #32
 800037c:	fa20 f004 	lsr.w	r0, r0, r4
 8000380:	fa01 f302 	lsl.w	r3, r1, r2
 8000384:	ea40 0003 	orr.w	r0, r0, r3
 8000388:	fa21 f304 	lsr.w	r3, r1, r4
 800038c:	ea45 0103 	orr.w	r1, r5, r3
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	f1c4 040c 	rsb	r4, r4, #12
 8000396:	f1c4 0220 	rsb	r2, r4, #32
 800039a:	fa20 f002 	lsr.w	r0, r0, r2
 800039e:	fa01 f304 	lsl.w	r3, r1, r4
 80003a2:	ea40 0003 	orr.w	r0, r0, r3
 80003a6:	4629      	mov	r1, r5
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	fa21 f004 	lsr.w	r0, r1, r4
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f094 0f00 	teq	r4, #0
 80003b6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ba:	bf06      	itte	eq
 80003bc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c0:	3401      	addeq	r4, #1
 80003c2:	3d01      	subne	r5, #1
 80003c4:	e74e      	b.n	8000264 <__adddf3+0x8c>
 80003c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ca:	bf18      	it	ne
 80003cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d0:	d029      	beq.n	8000426 <__adddf3+0x24e>
 80003d2:	ea94 0f05 	teq	r4, r5
 80003d6:	bf08      	it	eq
 80003d8:	ea90 0f02 	teqeq	r0, r2
 80003dc:	d005      	beq.n	80003ea <__adddf3+0x212>
 80003de:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e2:	bf04      	itt	eq
 80003e4:	4619      	moveq	r1, r3
 80003e6:	4610      	moveq	r0, r2
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea91 0f03 	teq	r1, r3
 80003ee:	bf1e      	ittt	ne
 80003f0:	2100      	movne	r1, #0
 80003f2:	2000      	movne	r0, #0
 80003f4:	bd30      	popne	{r4, r5, pc}
 80003f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fa:	d105      	bne.n	8000408 <__adddf3+0x230>
 80003fc:	0040      	lsls	r0, r0, #1
 80003fe:	4149      	adcs	r1, r1
 8000400:	bf28      	it	cs
 8000402:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000406:	bd30      	pop	{r4, r5, pc}
 8000408:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800040c:	bf3c      	itt	cc
 800040e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000412:	bd30      	popcc	{r4, r5, pc}
 8000414:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000418:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800041c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000420:	f04f 0000 	mov.w	r0, #0
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042a:	bf1a      	itte	ne
 800042c:	4619      	movne	r1, r3
 800042e:	4610      	movne	r0, r2
 8000430:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000434:	bf1c      	itt	ne
 8000436:	460b      	movne	r3, r1
 8000438:	4602      	movne	r2, r0
 800043a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043e:	bf06      	itte	eq
 8000440:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000444:	ea91 0f03 	teqeq	r1, r3
 8000448:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	bf00      	nop

08000450 <__aeabi_ui2d>:
 8000450:	f090 0f00 	teq	r0, #0
 8000454:	bf04      	itt	eq
 8000456:	2100      	moveq	r1, #0
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000460:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000464:	f04f 0500 	mov.w	r5, #0
 8000468:	f04f 0100 	mov.w	r1, #0
 800046c:	e750      	b.n	8000310 <__adddf3+0x138>
 800046e:	bf00      	nop

08000470 <__aeabi_i2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000488:	bf48      	it	mi
 800048a:	4240      	negmi	r0, r0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e73e      	b.n	8000310 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_f2d>:
 8000494:	0042      	lsls	r2, r0, #1
 8000496:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049a:	ea4f 0131 	mov.w	r1, r1, rrx
 800049e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a2:	bf1f      	itttt	ne
 80004a4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004ac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b0:	4770      	bxne	lr
 80004b2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b6:	bf08      	it	eq
 80004b8:	4770      	bxeq	lr
 80004ba:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004be:	bf04      	itt	eq
 80004c0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d4:	e71c      	b.n	8000310 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_ul2d>:
 80004d8:	ea50 0201 	orrs.w	r2, r0, r1
 80004dc:	bf08      	it	eq
 80004de:	4770      	bxeq	lr
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	f04f 0500 	mov.w	r5, #0
 80004e6:	e00a      	b.n	80004fe <__aeabi_l2d+0x16>

080004e8 <__aeabi_l2d>:
 80004e8:	ea50 0201 	orrs.w	r2, r0, r1
 80004ec:	bf08      	it	eq
 80004ee:	4770      	bxeq	lr
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f6:	d502      	bpl.n	80004fe <__aeabi_l2d+0x16>
 80004f8:	4240      	negs	r0, r0
 80004fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000502:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000506:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050a:	f43f aed8 	beq.w	80002be <__adddf3+0xe6>
 800050e:	f04f 0203 	mov.w	r2, #3
 8000512:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000516:	bf18      	it	ne
 8000518:	3203      	addne	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000526:	f1c2 0320 	rsb	r3, r2, #32
 800052a:	fa00 fc03 	lsl.w	ip, r0, r3
 800052e:	fa20 f002 	lsr.w	r0, r0, r2
 8000532:	fa01 fe03 	lsl.w	lr, r1, r3
 8000536:	ea40 000e 	orr.w	r0, r0, lr
 800053a:	fa21 f102 	lsr.w	r1, r1, r2
 800053e:	4414      	add	r4, r2
 8000540:	e6bd      	b.n	80002be <__adddf3+0xe6>
 8000542:	bf00      	nop

08000544 <__aeabi_dmul>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000552:	bf1d      	ittte	ne
 8000554:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000558:	ea94 0f0c 	teqne	r4, ip
 800055c:	ea95 0f0c 	teqne	r5, ip
 8000560:	f000 f8de 	bleq	8000720 <__aeabi_dmul+0x1dc>
 8000564:	442c      	add	r4, r5
 8000566:	ea81 0603 	eor.w	r6, r1, r3
 800056a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000572:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000576:	bf18      	it	ne
 8000578:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800057c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000580:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000584:	d038      	beq.n	80005f8 <__aeabi_dmul+0xb4>
 8000586:	fba0 ce02 	umull	ip, lr, r0, r2
 800058a:	f04f 0500 	mov.w	r5, #0
 800058e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000592:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000596:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059a:	f04f 0600 	mov.w	r6, #0
 800059e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a2:	f09c 0f00 	teq	ip, #0
 80005a6:	bf18      	it	ne
 80005a8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005ac:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b8:	d204      	bcs.n	80005c4 <__aeabi_dmul+0x80>
 80005ba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005be:	416d      	adcs	r5, r5
 80005c0:	eb46 0606 	adc.w	r6, r6, r6
 80005c4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005cc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005dc:	bf88      	it	hi
 80005de:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e2:	d81e      	bhi.n	8000622 <__aeabi_dmul+0xde>
 80005e4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e8:	bf08      	it	eq
 80005ea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ee:	f150 0000 	adcs.w	r0, r0, #0
 80005f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005fc:	ea46 0101 	orr.w	r1, r6, r1
 8000600:	ea40 0002 	orr.w	r0, r0, r2
 8000604:	ea81 0103 	eor.w	r1, r1, r3
 8000608:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800060c:	bfc2      	ittt	gt
 800060e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000612:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000616:	bd70      	popgt	{r4, r5, r6, pc}
 8000618:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800061c:	f04f 0e00 	mov.w	lr, #0
 8000620:	3c01      	subs	r4, #1
 8000622:	f300 80ab 	bgt.w	800077c <__aeabi_dmul+0x238>
 8000626:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062a:	bfde      	ittt	le
 800062c:	2000      	movle	r0, #0
 800062e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000632:	bd70      	pople	{r4, r5, r6, pc}
 8000634:	f1c4 0400 	rsb	r4, r4, #0
 8000638:	3c20      	subs	r4, #32
 800063a:	da35      	bge.n	80006a8 <__aeabi_dmul+0x164>
 800063c:	340c      	adds	r4, #12
 800063e:	dc1b      	bgt.n	8000678 <__aeabi_dmul+0x134>
 8000640:	f104 0414 	add.w	r4, r4, #20
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f305 	lsl.w	r3, r0, r5
 800064c:	fa20 f004 	lsr.w	r0, r0, r4
 8000650:	fa01 f205 	lsl.w	r2, r1, r5
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800065c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000660:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000664:	fa21 f604 	lsr.w	r6, r1, r4
 8000668:	eb42 0106 	adc.w	r1, r2, r6
 800066c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000670:	bf08      	it	eq
 8000672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f1c4 040c 	rsb	r4, r4, #12
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f304 	lsl.w	r3, r0, r4
 8000684:	fa20 f005 	lsr.w	r0, r0, r5
 8000688:	fa01 f204 	lsl.w	r2, r1, r4
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	f141 0100 	adc.w	r1, r1, #0
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f205 	lsl.w	r2, r0, r5
 80006b0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b4:	fa20 f304 	lsr.w	r3, r0, r4
 80006b8:	fa01 f205 	lsl.w	r2, r1, r5
 80006bc:	ea43 0302 	orr.w	r3, r3, r2
 80006c0:	fa21 f004 	lsr.w	r0, r1, r4
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	fa21 f204 	lsr.w	r2, r1, r4
 80006cc:	ea20 0002 	bic.w	r0, r0, r2
 80006d0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f094 0f00 	teq	r4, #0
 80006e4:	d10f      	bne.n	8000706 <__aeabi_dmul+0x1c2>
 80006e6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ea:	0040      	lsls	r0, r0, #1
 80006ec:	eb41 0101 	adc.w	r1, r1, r1
 80006f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f4:	bf08      	it	eq
 80006f6:	3c01      	subeq	r4, #1
 80006f8:	d0f7      	beq.n	80006ea <__aeabi_dmul+0x1a6>
 80006fa:	ea41 0106 	orr.w	r1, r1, r6
 80006fe:	f095 0f00 	teq	r5, #0
 8000702:	bf18      	it	ne
 8000704:	4770      	bxne	lr
 8000706:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070a:	0052      	lsls	r2, r2, #1
 800070c:	eb43 0303 	adc.w	r3, r3, r3
 8000710:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000714:	bf08      	it	eq
 8000716:	3d01      	subeq	r5, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1c6>
 800071a:	ea43 0306 	orr.w	r3, r3, r6
 800071e:	4770      	bx	lr
 8000720:	ea94 0f0c 	teq	r4, ip
 8000724:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000728:	bf18      	it	ne
 800072a:	ea95 0f0c 	teqne	r5, ip
 800072e:	d00c      	beq.n	800074a <__aeabi_dmul+0x206>
 8000730:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000734:	bf18      	it	ne
 8000736:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073a:	d1d1      	bne.n	80006e0 <__aeabi_dmul+0x19c>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074e:	bf06      	itte	eq
 8000750:	4610      	moveq	r0, r2
 8000752:	4619      	moveq	r1, r3
 8000754:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000758:	d019      	beq.n	800078e <__aeabi_dmul+0x24a>
 800075a:	ea94 0f0c 	teq	r4, ip
 800075e:	d102      	bne.n	8000766 <__aeabi_dmul+0x222>
 8000760:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000764:	d113      	bne.n	800078e <__aeabi_dmul+0x24a>
 8000766:	ea95 0f0c 	teq	r5, ip
 800076a:	d105      	bne.n	8000778 <__aeabi_dmul+0x234>
 800076c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000770:	bf1c      	itt	ne
 8000772:	4610      	movne	r0, r2
 8000774:	4619      	movne	r1, r3
 8000776:	d10a      	bne.n	800078e <__aeabi_dmul+0x24a>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000784:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000792:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000796:	bd70      	pop	{r4, r5, r6, pc}

08000798 <__aeabi_ddiv>:
 8000798:	b570      	push	{r4, r5, r6, lr}
 800079a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a6:	bf1d      	ittte	ne
 80007a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007ac:	ea94 0f0c 	teqne	r4, ip
 80007b0:	ea95 0f0c 	teqne	r5, ip
 80007b4:	f000 f8a7 	bleq	8000906 <__aeabi_ddiv+0x16e>
 80007b8:	eba4 0405 	sub.w	r4, r4, r5
 80007bc:	ea81 0e03 	eor.w	lr, r1, r3
 80007c0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c8:	f000 8088 	beq.w	80008dc <__aeabi_ddiv+0x144>
 80007cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007dc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007ec:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f0:	429d      	cmp	r5, r3
 80007f2:	bf08      	it	eq
 80007f4:	4296      	cmpeq	r6, r2
 80007f6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fa:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fe:	d202      	bcs.n	8000806 <__aeabi_ddiv+0x6e>
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	1ab6      	subs	r6, r6, r2
 8000808:	eb65 0503 	sbc.w	r5, r5, r3
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000816:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081a:	ebb6 0e02 	subs.w	lr, r6, r2
 800081e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000822:	bf22      	ittt	cs
 8000824:	1ab6      	subcs	r6, r6, r2
 8000826:	4675      	movcs	r5, lr
 8000828:	ea40 000c 	orrcs.w	r0, r0, ip
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000874:	ea55 0e06 	orrs.w	lr, r5, r6
 8000878:	d018      	beq.n	80008ac <__aeabi_ddiv+0x114>
 800087a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000882:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000886:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000892:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000896:	d1c0      	bne.n	800081a <__aeabi_ddiv+0x82>
 8000898:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800089c:	d10b      	bne.n	80008b6 <__aeabi_ddiv+0x11e>
 800089e:	ea41 0100 	orr.w	r1, r1, r0
 80008a2:	f04f 0000 	mov.w	r0, #0
 80008a6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008aa:	e7b6      	b.n	800081a <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	bf04      	itt	eq
 80008b2:	4301      	orreq	r1, r0
 80008b4:	2000      	moveq	r0, #0
 80008b6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ba:	bf88      	it	hi
 80008bc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c0:	f63f aeaf 	bhi.w	8000622 <__aeabi_dmul+0xde>
 80008c4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c8:	bf04      	itt	eq
 80008ca:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d2:	f150 0000 	adcs.w	r0, r0, #0
 80008d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008da:	bd70      	pop	{r4, r5, r6, pc}
 80008dc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e8:	bfc2      	ittt	gt
 80008ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	popgt	{r4, r5, r6, pc}
 80008f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f8:	f04f 0e00 	mov.w	lr, #0
 80008fc:	3c01      	subs	r4, #1
 80008fe:	e690      	b.n	8000622 <__aeabi_dmul+0xde>
 8000900:	ea45 0e06 	orr.w	lr, r5, r6
 8000904:	e68d      	b.n	8000622 <__aeabi_dmul+0xde>
 8000906:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090a:	ea94 0f0c 	teq	r4, ip
 800090e:	bf08      	it	eq
 8000910:	ea95 0f0c 	teqeq	r5, ip
 8000914:	f43f af3b 	beq.w	800078e <__aeabi_dmul+0x24a>
 8000918:	ea94 0f0c 	teq	r4, ip
 800091c:	d10a      	bne.n	8000934 <__aeabi_ddiv+0x19c>
 800091e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000922:	f47f af34 	bne.w	800078e <__aeabi_dmul+0x24a>
 8000926:	ea95 0f0c 	teq	r5, ip
 800092a:	f47f af25 	bne.w	8000778 <__aeabi_dmul+0x234>
 800092e:	4610      	mov	r0, r2
 8000930:	4619      	mov	r1, r3
 8000932:	e72c      	b.n	800078e <__aeabi_dmul+0x24a>
 8000934:	ea95 0f0c 	teq	r5, ip
 8000938:	d106      	bne.n	8000948 <__aeabi_ddiv+0x1b0>
 800093a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093e:	f43f aefd 	beq.w	800073c <__aeabi_dmul+0x1f8>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e722      	b.n	800078e <__aeabi_dmul+0x24a>
 8000948:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800094c:	bf18      	it	ne
 800094e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000952:	f47f aec5 	bne.w	80006e0 <__aeabi_dmul+0x19c>
 8000956:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095a:	f47f af0d 	bne.w	8000778 <__aeabi_dmul+0x234>
 800095e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000962:	f47f aeeb 	bne.w	800073c <__aeabi_dmul+0x1f8>
 8000966:	e712      	b.n	800078e <__aeabi_dmul+0x24a>

08000968 <__aeabi_d2uiz>:
 8000968:	004a      	lsls	r2, r1, #1
 800096a:	d211      	bcs.n	8000990 <__aeabi_d2uiz+0x28>
 800096c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000970:	d211      	bcs.n	8000996 <__aeabi_d2uiz+0x2e>
 8000972:	d50d      	bpl.n	8000990 <__aeabi_d2uiz+0x28>
 8000974:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000978:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800097c:	d40e      	bmi.n	800099c <__aeabi_d2uiz+0x34>
 800097e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000982:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000986:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	4770      	bx	lr
 8000990:	f04f 0000 	mov.w	r0, #0
 8000994:	4770      	bx	lr
 8000996:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099a:	d102      	bne.n	80009a2 <__aeabi_d2uiz+0x3a>
 800099c:	f04f 30ff 	mov.w	r0, #4294967295
 80009a0:	4770      	bx	lr
 80009a2:	f04f 0000 	mov.w	r0, #0
 80009a6:	4770      	bx	lr

080009a8 <__aeabi_uldivmod>:
 80009a8:	b953      	cbnz	r3, 80009c0 <__aeabi_uldivmod+0x18>
 80009aa:	b94a      	cbnz	r2, 80009c0 <__aeabi_uldivmod+0x18>
 80009ac:	2900      	cmp	r1, #0
 80009ae:	bf08      	it	eq
 80009b0:	2800      	cmpeq	r0, #0
 80009b2:	bf1c      	itt	ne
 80009b4:	f04f 31ff 	movne.w	r1, #4294967295
 80009b8:	f04f 30ff 	movne.w	r0, #4294967295
 80009bc:	f000 b972 	b.w	8000ca4 <__aeabi_idiv0>
 80009c0:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c8:	f000 f806 	bl	80009d8 <__udivmoddi4>
 80009cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d4:	b004      	add	sp, #16
 80009d6:	4770      	bx	lr

080009d8 <__udivmoddi4>:
 80009d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009dc:	9e08      	ldr	r6, [sp, #32]
 80009de:	4604      	mov	r4, r0
 80009e0:	4688      	mov	r8, r1
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d14b      	bne.n	8000a7e <__udivmoddi4+0xa6>
 80009e6:	428a      	cmp	r2, r1
 80009e8:	4615      	mov	r5, r2
 80009ea:	d967      	bls.n	8000abc <__udivmoddi4+0xe4>
 80009ec:	fab2 f282 	clz	r2, r2
 80009f0:	b14a      	cbz	r2, 8000a06 <__udivmoddi4+0x2e>
 80009f2:	f1c2 0720 	rsb	r7, r2, #32
 80009f6:	fa01 f302 	lsl.w	r3, r1, r2
 80009fa:	fa20 f707 	lsr.w	r7, r0, r7
 80009fe:	4095      	lsls	r5, r2
 8000a00:	ea47 0803 	orr.w	r8, r7, r3
 8000a04:	4094      	lsls	r4, r2
 8000a06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a0a:	0c23      	lsrs	r3, r4, #16
 8000a0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a10:	fa1f fc85 	uxth.w	ip, r5
 8000a14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000a20:	4299      	cmp	r1, r3
 8000a22:	d909      	bls.n	8000a38 <__udivmoddi4+0x60>
 8000a24:	18eb      	adds	r3, r5, r3
 8000a26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a2a:	f080 811b 	bcs.w	8000c64 <__udivmoddi4+0x28c>
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	f240 8118 	bls.w	8000c64 <__udivmoddi4+0x28c>
 8000a34:	3f02      	subs	r7, #2
 8000a36:	442b      	add	r3, r5
 8000a38:	1a5b      	subs	r3, r3, r1
 8000a3a:	b2a4      	uxth	r4, r4
 8000a3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a4c:	45a4      	cmp	ip, r4
 8000a4e:	d909      	bls.n	8000a64 <__udivmoddi4+0x8c>
 8000a50:	192c      	adds	r4, r5, r4
 8000a52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a56:	f080 8107 	bcs.w	8000c68 <__udivmoddi4+0x290>
 8000a5a:	45a4      	cmp	ip, r4
 8000a5c:	f240 8104 	bls.w	8000c68 <__udivmoddi4+0x290>
 8000a60:	3802      	subs	r0, #2
 8000a62:	442c      	add	r4, r5
 8000a64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a68:	eba4 040c 	sub.w	r4, r4, ip
 8000a6c:	2700      	movs	r7, #0
 8000a6e:	b11e      	cbz	r6, 8000a78 <__udivmoddi4+0xa0>
 8000a70:	40d4      	lsrs	r4, r2
 8000a72:	2300      	movs	r3, #0
 8000a74:	e9c6 4300 	strd	r4, r3, [r6]
 8000a78:	4639      	mov	r1, r7
 8000a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d909      	bls.n	8000a96 <__udivmoddi4+0xbe>
 8000a82:	2e00      	cmp	r6, #0
 8000a84:	f000 80eb 	beq.w	8000c5e <__udivmoddi4+0x286>
 8000a88:	2700      	movs	r7, #0
 8000a8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000a8e:	4638      	mov	r0, r7
 8000a90:	4639      	mov	r1, r7
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	fab3 f783 	clz	r7, r3
 8000a9a:	2f00      	cmp	r7, #0
 8000a9c:	d147      	bne.n	8000b2e <__udivmoddi4+0x156>
 8000a9e:	428b      	cmp	r3, r1
 8000aa0:	d302      	bcc.n	8000aa8 <__udivmoddi4+0xd0>
 8000aa2:	4282      	cmp	r2, r0
 8000aa4:	f200 80fa 	bhi.w	8000c9c <__udivmoddi4+0x2c4>
 8000aa8:	1a84      	subs	r4, r0, r2
 8000aaa:	eb61 0303 	sbc.w	r3, r1, r3
 8000aae:	2001      	movs	r0, #1
 8000ab0:	4698      	mov	r8, r3
 8000ab2:	2e00      	cmp	r6, #0
 8000ab4:	d0e0      	beq.n	8000a78 <__udivmoddi4+0xa0>
 8000ab6:	e9c6 4800 	strd	r4, r8, [r6]
 8000aba:	e7dd      	b.n	8000a78 <__udivmoddi4+0xa0>
 8000abc:	b902      	cbnz	r2, 8000ac0 <__udivmoddi4+0xe8>
 8000abe:	deff      	udf	#255	; 0xff
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	2a00      	cmp	r2, #0
 8000ac6:	f040 808f 	bne.w	8000be8 <__udivmoddi4+0x210>
 8000aca:	1b49      	subs	r1, r1, r5
 8000acc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ad0:	fa1f f885 	uxth.w	r8, r5
 8000ad4:	2701      	movs	r7, #1
 8000ad6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000ada:	0c23      	lsrs	r3, r4, #16
 8000adc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ae0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ae8:	4299      	cmp	r1, r3
 8000aea:	d907      	bls.n	8000afc <__udivmoddi4+0x124>
 8000aec:	18eb      	adds	r3, r5, r3
 8000aee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000af2:	d202      	bcs.n	8000afa <__udivmoddi4+0x122>
 8000af4:	4299      	cmp	r1, r3
 8000af6:	f200 80cd 	bhi.w	8000c94 <__udivmoddi4+0x2bc>
 8000afa:	4684      	mov	ip, r0
 8000afc:	1a59      	subs	r1, r3, r1
 8000afe:	b2a3      	uxth	r3, r4
 8000b00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b0c:	fb08 f800 	mul.w	r8, r8, r0
 8000b10:	45a0      	cmp	r8, r4
 8000b12:	d907      	bls.n	8000b24 <__udivmoddi4+0x14c>
 8000b14:	192c      	adds	r4, r5, r4
 8000b16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b1a:	d202      	bcs.n	8000b22 <__udivmoddi4+0x14a>
 8000b1c:	45a0      	cmp	r8, r4
 8000b1e:	f200 80b6 	bhi.w	8000c8e <__udivmoddi4+0x2b6>
 8000b22:	4618      	mov	r0, r3
 8000b24:	eba4 0408 	sub.w	r4, r4, r8
 8000b28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b2c:	e79f      	b.n	8000a6e <__udivmoddi4+0x96>
 8000b2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000b32:	40bb      	lsls	r3, r7
 8000b34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000b40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b4c:	4325      	orrs	r5, r4
 8000b4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b52:	0c2c      	lsrs	r4, r5, #16
 8000b54:	fb08 3319 	mls	r3, r8, r9, r3
 8000b58:	fa1f fa8e 	uxth.w	sl, lr
 8000b5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000b60:	fb09 f40a 	mul.w	r4, r9, sl
 8000b64:	429c      	cmp	r4, r3
 8000b66:	fa02 f207 	lsl.w	r2, r2, r7
 8000b6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000b6e:	d90b      	bls.n	8000b88 <__udivmoddi4+0x1b0>
 8000b70:	eb1e 0303 	adds.w	r3, lr, r3
 8000b74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b78:	f080 8087 	bcs.w	8000c8a <__udivmoddi4+0x2b2>
 8000b7c:	429c      	cmp	r4, r3
 8000b7e:	f240 8084 	bls.w	8000c8a <__udivmoddi4+0x2b2>
 8000b82:	f1a9 0902 	sub.w	r9, r9, #2
 8000b86:	4473      	add	r3, lr
 8000b88:	1b1b      	subs	r3, r3, r4
 8000b8a:	b2ad      	uxth	r5, r5
 8000b8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b90:	fb08 3310 	mls	r3, r8, r0, r3
 8000b94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000b98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000b9c:	45a2      	cmp	sl, r4
 8000b9e:	d908      	bls.n	8000bb2 <__udivmoddi4+0x1da>
 8000ba0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ba4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ba8:	d26b      	bcs.n	8000c82 <__udivmoddi4+0x2aa>
 8000baa:	45a2      	cmp	sl, r4
 8000bac:	d969      	bls.n	8000c82 <__udivmoddi4+0x2aa>
 8000bae:	3802      	subs	r0, #2
 8000bb0:	4474      	add	r4, lr
 8000bb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000bba:	eba4 040a 	sub.w	r4, r4, sl
 8000bbe:	454c      	cmp	r4, r9
 8000bc0:	46c2      	mov	sl, r8
 8000bc2:	464b      	mov	r3, r9
 8000bc4:	d354      	bcc.n	8000c70 <__udivmoddi4+0x298>
 8000bc6:	d051      	beq.n	8000c6c <__udivmoddi4+0x294>
 8000bc8:	2e00      	cmp	r6, #0
 8000bca:	d069      	beq.n	8000ca0 <__udivmoddi4+0x2c8>
 8000bcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000bd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000bd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000bd8:	40fd      	lsrs	r5, r7
 8000bda:	40fc      	lsrs	r4, r7
 8000bdc:	ea4c 0505 	orr.w	r5, ip, r5
 8000be0:	e9c6 5400 	strd	r5, r4, [r6]
 8000be4:	2700      	movs	r7, #0
 8000be6:	e747      	b.n	8000a78 <__udivmoddi4+0xa0>
 8000be8:	f1c2 0320 	rsb	r3, r2, #32
 8000bec:	fa20 f703 	lsr.w	r7, r0, r3
 8000bf0:	4095      	lsls	r5, r2
 8000bf2:	fa01 f002 	lsl.w	r0, r1, r2
 8000bf6:	fa21 f303 	lsr.w	r3, r1, r3
 8000bfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bfe:	4338      	orrs	r0, r7
 8000c00:	0c01      	lsrs	r1, r0, #16
 8000c02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c06:	fa1f f885 	uxth.w	r8, r5
 8000c0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c12:	fb07 f308 	mul.w	r3, r7, r8
 8000c16:	428b      	cmp	r3, r1
 8000c18:	fa04 f402 	lsl.w	r4, r4, r2
 8000c1c:	d907      	bls.n	8000c2e <__udivmoddi4+0x256>
 8000c1e:	1869      	adds	r1, r5, r1
 8000c20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c24:	d22f      	bcs.n	8000c86 <__udivmoddi4+0x2ae>
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d92d      	bls.n	8000c86 <__udivmoddi4+0x2ae>
 8000c2a:	3f02      	subs	r7, #2
 8000c2c:	4429      	add	r1, r5
 8000c2e:	1acb      	subs	r3, r1, r3
 8000c30:	b281      	uxth	r1, r0
 8000c32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c3e:	fb00 f308 	mul.w	r3, r0, r8
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d907      	bls.n	8000c56 <__udivmoddi4+0x27e>
 8000c46:	1869      	adds	r1, r5, r1
 8000c48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c4c:	d217      	bcs.n	8000c7e <__udivmoddi4+0x2a6>
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d915      	bls.n	8000c7e <__udivmoddi4+0x2a6>
 8000c52:	3802      	subs	r0, #2
 8000c54:	4429      	add	r1, r5
 8000c56:	1ac9      	subs	r1, r1, r3
 8000c58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c5c:	e73b      	b.n	8000ad6 <__udivmoddi4+0xfe>
 8000c5e:	4637      	mov	r7, r6
 8000c60:	4630      	mov	r0, r6
 8000c62:	e709      	b.n	8000a78 <__udivmoddi4+0xa0>
 8000c64:	4607      	mov	r7, r0
 8000c66:	e6e7      	b.n	8000a38 <__udivmoddi4+0x60>
 8000c68:	4618      	mov	r0, r3
 8000c6a:	e6fb      	b.n	8000a64 <__udivmoddi4+0x8c>
 8000c6c:	4541      	cmp	r1, r8
 8000c6e:	d2ab      	bcs.n	8000bc8 <__udivmoddi4+0x1f0>
 8000c70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000c74:	eb69 020e 	sbc.w	r2, r9, lr
 8000c78:	3801      	subs	r0, #1
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	e7a4      	b.n	8000bc8 <__udivmoddi4+0x1f0>
 8000c7e:	4660      	mov	r0, ip
 8000c80:	e7e9      	b.n	8000c56 <__udivmoddi4+0x27e>
 8000c82:	4618      	mov	r0, r3
 8000c84:	e795      	b.n	8000bb2 <__udivmoddi4+0x1da>
 8000c86:	4667      	mov	r7, ip
 8000c88:	e7d1      	b.n	8000c2e <__udivmoddi4+0x256>
 8000c8a:	4681      	mov	r9, r0
 8000c8c:	e77c      	b.n	8000b88 <__udivmoddi4+0x1b0>
 8000c8e:	3802      	subs	r0, #2
 8000c90:	442c      	add	r4, r5
 8000c92:	e747      	b.n	8000b24 <__udivmoddi4+0x14c>
 8000c94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c98:	442b      	add	r3, r5
 8000c9a:	e72f      	b.n	8000afc <__udivmoddi4+0x124>
 8000c9c:	4638      	mov	r0, r7
 8000c9e:	e708      	b.n	8000ab2 <__udivmoddi4+0xda>
 8000ca0:	4637      	mov	r7, r6
 8000ca2:	e6e9      	b.n	8000a78 <__udivmoddi4+0xa0>

08000ca4 <__aeabi_idiv0>:
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	; 0x28
 8000cac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cbe:	4b36      	ldr	r3, [pc, #216]	; (8000d98 <MX_GPIO_Init+0xf0>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc2:	4a35      	ldr	r2, [pc, #212]	; (8000d98 <MX_GPIO_Init+0xf0>)
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cca:	4b33      	ldr	r3, [pc, #204]	; (8000d98 <MX_GPIO_Init+0xf0>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cce:	f003 0304 	and.w	r3, r3, #4
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	4b30      	ldr	r3, [pc, #192]	; (8000d98 <MX_GPIO_Init+0xf0>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	4a2f      	ldr	r2, [pc, #188]	; (8000d98 <MX_GPIO_Init+0xf0>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce2:	4b2d      	ldr	r3, [pc, #180]	; (8000d98 <MX_GPIO_Init+0xf0>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	4b2a      	ldr	r3, [pc, #168]	; (8000d98 <MX_GPIO_Init+0xf0>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf2:	4a29      	ldr	r2, [pc, #164]	; (8000d98 <MX_GPIO_Init+0xf0>)
 8000cf4:	f043 0302 	orr.w	r3, r3, #2
 8000cf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfa:	4b27      	ldr	r3, [pc, #156]	; (8000d98 <MX_GPIO_Init+0xf0>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d06:	4b24      	ldr	r3, [pc, #144]	; (8000d98 <MX_GPIO_Init+0xf0>)
 8000d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0a:	4a23      	ldr	r2, [pc, #140]	; (8000d98 <MX_GPIO_Init+0xf0>)
 8000d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d12:	4b21      	ldr	r3, [pc, #132]	; (8000d98 <MX_GPIO_Init+0xf0>)
 8000d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2108      	movs	r1, #8
 8000d22:	481e      	ldr	r0, [pc, #120]	; (8000d9c <MX_GPIO_Init+0xf4>)
 8000d24:	f001 f89e 	bl	8001e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA3 PA4 PA5
                           PA6 PA7 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000d28:	f241 03fa 	movw	r3, #4346	; 0x10fa
 8000d2c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d40:	f000 ff26 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000d44:	23f3      	movs	r3, #243	; 0xf3
 8000d46:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	4619      	mov	r1, r3
 8000d56:	4811      	ldr	r0, [pc, #68]	; (8000d9c <MX_GPIO_Init+0xf4>)
 8000d58:	f000 ff1a 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000d5c:	2308      	movs	r3, #8
 8000d5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d60:	2301      	movs	r3, #1
 8000d62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	4619      	mov	r1, r3
 8000d72:	480a      	ldr	r0, [pc, #40]	; (8000d9c <MX_GPIO_Init+0xf4>)
 8000d74:	f000 ff0c 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d78:	2308      	movs	r3, #8
 8000d7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4805      	ldr	r0, [pc, #20]	; (8000da0 <MX_GPIO_Init+0xf8>)
 8000d8c:	f000 ff00 	bl	8001b90 <HAL_GPIO_Init>

}
 8000d90:	bf00      	nop
 8000d92:	3728      	adds	r7, #40	; 0x28
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	48000400 	.word	0x48000400
 8000da0:	48001c00 	.word	0x48001c00

08000da4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da4:	b5b0      	push	{r4, r5, r7, lr}
 8000da6:	b0ca      	sub	sp, #296	; 0x128
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000daa:	f000 fd74 	bl	8001896 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dae:	f000 fa9d 	bl	80012ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000db2:	f7ff ff79 	bl	8000ca8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000db6:	f000 fcc1 	bl	800173c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000dba:	f000 fba9 	bl	8001510 <MX_TIM1_Init>
  double th1b = atan2(py, px);
  double th2a = 2 * atan(sqrt(((a + b) * (a + b) - c * c) / (c * c - (a - b) * (a - b))));
  double th2b = -2 * atan(sqrt(((a + b) * (a + b) - c * c) / (c * c - (a - b) * (a - b))));
  */
  TIM_OC_InitTypeDef sConfigOC;
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dbe:	2360      	movs	r3, #96	; 0x60
 8000dc0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  double thA[4] = {
 8000de2:	4b2a      	ldr	r3, [pc, #168]	; (8000e8c <main+0xe8>)
 8000de4:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 8000de8:	461d      	mov	r5, r3
 8000dea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000df2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  0.0,
		  83.0,
		  142.0, /* lim */
		  99.0
  };
  double thB[4] = {
 8000df6:	4b26      	ldr	r3, [pc, #152]	; (8000e90 <main+0xec>)
 8000df8:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 8000dfc:	461d      	mov	r5, r3
 8000dfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e02:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  100.0,
		  83.0,
		  142.0, /* lim */
		  99.0
  };
  double thC[4] = {
 8000e0a:	4b22      	ldr	r3, [pc, #136]	; (8000e94 <main+0xf0>)
 8000e0c:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8000e10:	461d      	mov	r5, r3
 8000e12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e16:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  85.0,
		  145.0, /* lim */
		  54.0
  };

  double thD[4] = {
 8000e1e:	4b1e      	ldr	r3, [pc, #120]	; (8000e98 <main+0xf4>)
 8000e20:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8000e24:	461d      	mov	r5, r3
 8000e26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e2a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  0.0,
		  85.0,
		  145.0, /* lim */
		  54.0
  };
  double thE[4] = {
 8000e32:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <main+0xf8>)
 8000e34:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8000e38:	461d      	mov	r5, r3
 8000e3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e3e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  85.0,
		  100.0, /* lim */
		  54.0
  };

  double thF[4] = {
 8000e46:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <main+0xfc>)
 8000e48:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000e4c:	461d      	mov	r5, r3
 8000e4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e52:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  99.0
  };
  /* 120 */
  /* th1 = 105 th2 = 85, th3 = 145, th4 = 90*/
  /* th1 = 110 th2 = 80, th3 = 145, th4 = 125*/
  double min_pulse[4] = {
 8000e5a:	f107 0320 	add.w	r3, r7, #32
 8000e5e:	4a11      	ldr	r2, [pc, #68]	; (8000ea4 <main+0x100>)
 8000e60:	461c      	mov	r4, r3
 8000e62:	4615      	mov	r5, r2
 8000e64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e68:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  50, 50, 50, 50
  };
  int count = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  while (1)
  {
	  uint32_t pulse[4];
	  uint32_t channels[4] = {
 8000e76:	463b      	mov	r3, r7
 8000e78:	4a0b      	ldr	r2, [pc, #44]	; (8000ea8 <main+0x104>)
 8000e7a:	461c      	mov	r4, r3
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  TIM_CHANNEL_1,
			  TIM_CHANNEL_2,
			  TIM_CHANNEL_3,
			  TIM_CHANNEL_4
	  };
	  for (int i = 0; i < 4; i++) {
 8000e84:	2300      	movs	r3, #0
 8000e86:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000e8a:	e20b      	b.n	80012a4 <main+0x500>
 8000e8c:	080045f0 	.word	0x080045f0
 8000e90:	08004610 	.word	0x08004610
 8000e94:	08004630 	.word	0x08004630
 8000e98:	08004650 	.word	0x08004650
 8000e9c:	08004670 	.word	0x08004670
 8000ea0:	08004690 	.word	0x08004690
 8000ea4:	080046b0 	.word	0x080046b0
 8000ea8:	080046d0 	.word	0x080046d0
		  if ((count / 2) % 6 == 0) {
 8000eac:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000eb0:	0fda      	lsrs	r2, r3, #31
 8000eb2:	4413      	add	r3, r2
 8000eb4:	105b      	asrs	r3, r3, #1
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4be6      	ldr	r3, [pc, #920]	; (8001254 <main+0x4b0>)
 8000eba:	fb83 3201 	smull	r3, r2, r3, r1
 8000ebe:	17cb      	asrs	r3, r1, #31
 8000ec0:	1ad2      	subs	r2, r2, r3
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	4413      	add	r3, r2
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	1aca      	subs	r2, r1, r3
 8000ecc:	2a00      	cmp	r2, #0
 8000ece:	d13f      	bne.n	8000f50 <main+0x1ac>
			  pulse[i] = (uint32_t)((220.0 - 50.0) * thA[i] / 180.0 + 50.0);
 8000ed0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8000eda:	4413      	add	r3, r2
 8000edc:	3b48      	subs	r3, #72	; 0x48
 8000ede:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ee2:	f04f 0200 	mov.w	r2, #0
 8000ee6:	4bdc      	ldr	r3, [pc, #880]	; (8001258 <main+0x4b4>)
 8000ee8:	f7ff fb2c 	bl	8000544 <__aeabi_dmul>
 8000eec:	4603      	mov	r3, r0
 8000eee:	460c      	mov	r4, r1
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	4621      	mov	r1, r4
 8000ef4:	f04f 0200 	mov.w	r2, #0
 8000ef8:	4bd8      	ldr	r3, [pc, #864]	; (800125c <main+0x4b8>)
 8000efa:	f7ff fc4d 	bl	8000798 <__aeabi_ddiv>
 8000efe:	4603      	mov	r3, r0
 8000f00:	460c      	mov	r4, r1
 8000f02:	4618      	mov	r0, r3
 8000f04:	4621      	mov	r1, r4
 8000f06:	f04f 0200 	mov.w	r2, #0
 8000f0a:	4bd5      	ldr	r3, [pc, #852]	; (8001260 <main+0x4bc>)
 8000f0c:	f7ff f964 	bl	80001d8 <__adddf3>
 8000f10:	4603      	mov	r3, r0
 8000f12:	460c      	mov	r4, r1
 8000f14:	4618      	mov	r0, r3
 8000f16:	4621      	mov	r1, r4
 8000f18:	f7ff fd26 	bl	8000968 <__aeabi_d2uiz>
 8000f1c:	4601      	mov	r1, r0
 8000f1e:	f107 0310 	add.w	r3, r7, #16
 8000f22:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8000f26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			  sConfigOC.Pulse = pulse[i];
 8000f2a:	f107 0310 	add.w	r3, r7, #16
 8000f2e:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8000f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f36:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, channels[i]);
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8000f40:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f44:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000f48:	4619      	mov	r1, r3
 8000f4a:	48c6      	ldr	r0, [pc, #792]	; (8001264 <main+0x4c0>)
 8000f4c:	f002 fa62 	bl	8003414 <HAL_TIM_PWM_ConfigChannel>
		  }
		  if ((count / 2) % 6 == 1) {
 8000f50:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000f54:	0fda      	lsrs	r2, r3, #31
 8000f56:	4413      	add	r3, r2
 8000f58:	105b      	asrs	r3, r3, #1
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4bbd      	ldr	r3, [pc, #756]	; (8001254 <main+0x4b0>)
 8000f5e:	fb83 3201 	smull	r3, r2, r3, r1
 8000f62:	17cb      	asrs	r3, r1, #31
 8000f64:	1ad2      	subs	r2, r2, r3
 8000f66:	4613      	mov	r3, r2
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	4413      	add	r3, r2
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	1aca      	subs	r2, r1, r3
 8000f70:	2a01      	cmp	r2, #1
 8000f72:	d13f      	bne.n	8000ff4 <main+0x250>
			  pulse[i] = (uint32_t)((220.0 - 50.0) * thB[i] / 180.0 + 50.0);
 8000f74:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8000f7e:	4413      	add	r3, r2
 8000f80:	3b68      	subs	r3, #104	; 0x68
 8000f82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f86:	f04f 0200 	mov.w	r2, #0
 8000f8a:	4bb3      	ldr	r3, [pc, #716]	; (8001258 <main+0x4b4>)
 8000f8c:	f7ff fada 	bl	8000544 <__aeabi_dmul>
 8000f90:	4603      	mov	r3, r0
 8000f92:	460c      	mov	r4, r1
 8000f94:	4618      	mov	r0, r3
 8000f96:	4621      	mov	r1, r4
 8000f98:	f04f 0200 	mov.w	r2, #0
 8000f9c:	4baf      	ldr	r3, [pc, #700]	; (800125c <main+0x4b8>)
 8000f9e:	f7ff fbfb 	bl	8000798 <__aeabi_ddiv>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	460c      	mov	r4, r1
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	4621      	mov	r1, r4
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	4bac      	ldr	r3, [pc, #688]	; (8001260 <main+0x4bc>)
 8000fb0:	f7ff f912 	bl	80001d8 <__adddf3>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	460c      	mov	r4, r1
 8000fb8:	4618      	mov	r0, r3
 8000fba:	4621      	mov	r1, r4
 8000fbc:	f7ff fcd4 	bl	8000968 <__aeabi_d2uiz>
 8000fc0:	4601      	mov	r1, r0
 8000fc2:	f107 0310 	add.w	r3, r7, #16
 8000fc6:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8000fca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			  sConfigOC.Pulse = pulse[i];
 8000fce:	f107 0310 	add.w	r3, r7, #16
 8000fd2:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8000fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fda:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, channels[i]);
 8000fde:	463b      	mov	r3, r7
 8000fe0:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8000fe4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000fe8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000fec:	4619      	mov	r1, r3
 8000fee:	489d      	ldr	r0, [pc, #628]	; (8001264 <main+0x4c0>)
 8000ff0:	f002 fa10 	bl	8003414 <HAL_TIM_PWM_ConfigChannel>
		  }
		  if ((count / 2) % 6 == 2) {
 8000ff4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000ff8:	0fda      	lsrs	r2, r3, #31
 8000ffa:	4413      	add	r3, r2
 8000ffc:	105b      	asrs	r3, r3, #1
 8000ffe:	4619      	mov	r1, r3
 8001000:	4b94      	ldr	r3, [pc, #592]	; (8001254 <main+0x4b0>)
 8001002:	fb83 3201 	smull	r3, r2, r3, r1
 8001006:	17cb      	asrs	r3, r1, #31
 8001008:	1ad2      	subs	r2, r2, r3
 800100a:	4613      	mov	r3, r2
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	4413      	add	r3, r2
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	1aca      	subs	r2, r1, r3
 8001014:	2a02      	cmp	r2, #2
 8001016:	d13f      	bne.n	8001098 <main+0x2f4>
			  pulse[i] = (uint32_t)((220.0 - 50.0) * thC[i] / 180.0 + 50.0);
 8001018:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001022:	4413      	add	r3, r2
 8001024:	3b88      	subs	r3, #136	; 0x88
 8001026:	e9d3 0100 	ldrd	r0, r1, [r3]
 800102a:	f04f 0200 	mov.w	r2, #0
 800102e:	4b8a      	ldr	r3, [pc, #552]	; (8001258 <main+0x4b4>)
 8001030:	f7ff fa88 	bl	8000544 <__aeabi_dmul>
 8001034:	4603      	mov	r3, r0
 8001036:	460c      	mov	r4, r1
 8001038:	4618      	mov	r0, r3
 800103a:	4621      	mov	r1, r4
 800103c:	f04f 0200 	mov.w	r2, #0
 8001040:	4b86      	ldr	r3, [pc, #536]	; (800125c <main+0x4b8>)
 8001042:	f7ff fba9 	bl	8000798 <__aeabi_ddiv>
 8001046:	4603      	mov	r3, r0
 8001048:	460c      	mov	r4, r1
 800104a:	4618      	mov	r0, r3
 800104c:	4621      	mov	r1, r4
 800104e:	f04f 0200 	mov.w	r2, #0
 8001052:	4b83      	ldr	r3, [pc, #524]	; (8001260 <main+0x4bc>)
 8001054:	f7ff f8c0 	bl	80001d8 <__adddf3>
 8001058:	4603      	mov	r3, r0
 800105a:	460c      	mov	r4, r1
 800105c:	4618      	mov	r0, r3
 800105e:	4621      	mov	r1, r4
 8001060:	f7ff fc82 	bl	8000968 <__aeabi_d2uiz>
 8001064:	4601      	mov	r1, r0
 8001066:	f107 0310 	add.w	r3, r7, #16
 800106a:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800106e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			  sConfigOC.Pulse = pulse[i];
 8001072:	f107 0310 	add.w	r3, r7, #16
 8001076:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800107a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800107e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, channels[i]);
 8001082:	463b      	mov	r3, r7
 8001084:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8001088:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800108c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001090:	4619      	mov	r1, r3
 8001092:	4874      	ldr	r0, [pc, #464]	; (8001264 <main+0x4c0>)
 8001094:	f002 f9be 	bl	8003414 <HAL_TIM_PWM_ConfigChannel>
		  }
		  if ((count / 2) % 6 == 3) {
 8001098:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800109c:	0fda      	lsrs	r2, r3, #31
 800109e:	4413      	add	r3, r2
 80010a0:	105b      	asrs	r3, r3, #1
 80010a2:	4619      	mov	r1, r3
 80010a4:	4b6b      	ldr	r3, [pc, #428]	; (8001254 <main+0x4b0>)
 80010a6:	fb83 3201 	smull	r3, r2, r3, r1
 80010aa:	17cb      	asrs	r3, r1, #31
 80010ac:	1ad2      	subs	r2, r2, r3
 80010ae:	4613      	mov	r3, r2
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	4413      	add	r3, r2
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	1aca      	subs	r2, r1, r3
 80010b8:	2a03      	cmp	r2, #3
 80010ba:	d13f      	bne.n	800113c <main+0x398>
			  pulse[i] = (uint32_t)((220.0 - 50.0) * thD[i] / 180.0 + 50.0);
 80010bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80010c6:	4413      	add	r3, r2
 80010c8:	3ba8      	subs	r3, #168	; 0xa8
 80010ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010ce:	f04f 0200 	mov.w	r2, #0
 80010d2:	4b61      	ldr	r3, [pc, #388]	; (8001258 <main+0x4b4>)
 80010d4:	f7ff fa36 	bl	8000544 <__aeabi_dmul>
 80010d8:	4603      	mov	r3, r0
 80010da:	460c      	mov	r4, r1
 80010dc:	4618      	mov	r0, r3
 80010de:	4621      	mov	r1, r4
 80010e0:	f04f 0200 	mov.w	r2, #0
 80010e4:	4b5d      	ldr	r3, [pc, #372]	; (800125c <main+0x4b8>)
 80010e6:	f7ff fb57 	bl	8000798 <__aeabi_ddiv>
 80010ea:	4603      	mov	r3, r0
 80010ec:	460c      	mov	r4, r1
 80010ee:	4618      	mov	r0, r3
 80010f0:	4621      	mov	r1, r4
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	4b5a      	ldr	r3, [pc, #360]	; (8001260 <main+0x4bc>)
 80010f8:	f7ff f86e 	bl	80001d8 <__adddf3>
 80010fc:	4603      	mov	r3, r0
 80010fe:	460c      	mov	r4, r1
 8001100:	4618      	mov	r0, r3
 8001102:	4621      	mov	r1, r4
 8001104:	f7ff fc30 	bl	8000968 <__aeabi_d2uiz>
 8001108:	4601      	mov	r1, r0
 800110a:	f107 0310 	add.w	r3, r7, #16
 800110e:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8001112:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			  sConfigOC.Pulse = pulse[i];
 8001116:	f107 0310 	add.w	r3, r7, #16
 800111a:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800111e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001122:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, channels[i]);
 8001126:	463b      	mov	r3, r7
 8001128:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800112c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001130:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001134:	4619      	mov	r1, r3
 8001136:	484b      	ldr	r0, [pc, #300]	; (8001264 <main+0x4c0>)
 8001138:	f002 f96c 	bl	8003414 <HAL_TIM_PWM_ConfigChannel>
		  }
		  if ((count / 2) % 6 == 4) {
 800113c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001140:	0fda      	lsrs	r2, r3, #31
 8001142:	4413      	add	r3, r2
 8001144:	105b      	asrs	r3, r3, #1
 8001146:	4619      	mov	r1, r3
 8001148:	4b42      	ldr	r3, [pc, #264]	; (8001254 <main+0x4b0>)
 800114a:	fb83 3201 	smull	r3, r2, r3, r1
 800114e:	17cb      	asrs	r3, r1, #31
 8001150:	1ad2      	subs	r2, r2, r3
 8001152:	4613      	mov	r3, r2
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	4413      	add	r3, r2
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	1aca      	subs	r2, r1, r3
 800115c:	2a04      	cmp	r2, #4
 800115e:	d13f      	bne.n	80011e0 <main+0x43c>
			  pulse[i] = (uint32_t)((220.0 - 50.0) * thE[i] / 180.0 + 50.0);
 8001160:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800116a:	4413      	add	r3, r2
 800116c:	3bc8      	subs	r3, #200	; 0xc8
 800116e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001172:	f04f 0200 	mov.w	r2, #0
 8001176:	4b38      	ldr	r3, [pc, #224]	; (8001258 <main+0x4b4>)
 8001178:	f7ff f9e4 	bl	8000544 <__aeabi_dmul>
 800117c:	4603      	mov	r3, r0
 800117e:	460c      	mov	r4, r1
 8001180:	4618      	mov	r0, r3
 8001182:	4621      	mov	r1, r4
 8001184:	f04f 0200 	mov.w	r2, #0
 8001188:	4b34      	ldr	r3, [pc, #208]	; (800125c <main+0x4b8>)
 800118a:	f7ff fb05 	bl	8000798 <__aeabi_ddiv>
 800118e:	4603      	mov	r3, r0
 8001190:	460c      	mov	r4, r1
 8001192:	4618      	mov	r0, r3
 8001194:	4621      	mov	r1, r4
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	4b31      	ldr	r3, [pc, #196]	; (8001260 <main+0x4bc>)
 800119c:	f7ff f81c 	bl	80001d8 <__adddf3>
 80011a0:	4603      	mov	r3, r0
 80011a2:	460c      	mov	r4, r1
 80011a4:	4618      	mov	r0, r3
 80011a6:	4621      	mov	r1, r4
 80011a8:	f7ff fbde 	bl	8000968 <__aeabi_d2uiz>
 80011ac:	4601      	mov	r1, r0
 80011ae:	f107 0310 	add.w	r3, r7, #16
 80011b2:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80011b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			  sConfigOC.Pulse = pulse[i];
 80011ba:	f107 0310 	add.w	r3, r7, #16
 80011be:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80011c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, channels[i]);
 80011ca:	463b      	mov	r3, r7
 80011cc:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80011d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80011d4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80011d8:	4619      	mov	r1, r3
 80011da:	4822      	ldr	r0, [pc, #136]	; (8001264 <main+0x4c0>)
 80011dc:	f002 f91a 	bl	8003414 <HAL_TIM_PWM_ConfigChannel>
		  }

		  if ((count / 2) % 6 == 5) {
 80011e0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80011e4:	0fda      	lsrs	r2, r3, #31
 80011e6:	4413      	add	r3, r2
 80011e8:	105b      	asrs	r3, r3, #1
 80011ea:	4619      	mov	r1, r3
 80011ec:	4b19      	ldr	r3, [pc, #100]	; (8001254 <main+0x4b0>)
 80011ee:	fb83 3201 	smull	r3, r2, r3, r1
 80011f2:	17cb      	asrs	r3, r1, #31
 80011f4:	1ad2      	subs	r2, r2, r3
 80011f6:	4613      	mov	r3, r2
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	4413      	add	r3, r2
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	1aca      	subs	r2, r1, r3
 8001200:	2a05      	cmp	r2, #5
 8001202:	d14a      	bne.n	800129a <main+0x4f6>
			  pulse[i] = (uint32_t)((220.0 - 50.0) * thF[i] / 180.0 + 50.0);
 8001204:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800120e:	4413      	add	r3, r2
 8001210:	3be8      	subs	r3, #232	; 0xe8
 8001212:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001216:	f04f 0200 	mov.w	r2, #0
 800121a:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <main+0x4b4>)
 800121c:	f7ff f992 	bl	8000544 <__aeabi_dmul>
 8001220:	4603      	mov	r3, r0
 8001222:	460c      	mov	r4, r1
 8001224:	4618      	mov	r0, r3
 8001226:	4621      	mov	r1, r4
 8001228:	f04f 0200 	mov.w	r2, #0
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <main+0x4b8>)
 800122e:	f7ff fab3 	bl	8000798 <__aeabi_ddiv>
 8001232:	4603      	mov	r3, r0
 8001234:	460c      	mov	r4, r1
 8001236:	4618      	mov	r0, r3
 8001238:	4621      	mov	r1, r4
 800123a:	f04f 0200 	mov.w	r2, #0
 800123e:	4b08      	ldr	r3, [pc, #32]	; (8001260 <main+0x4bc>)
 8001240:	f7fe ffca 	bl	80001d8 <__adddf3>
 8001244:	4603      	mov	r3, r0
 8001246:	460c      	mov	r4, r1
 8001248:	4618      	mov	r0, r3
 800124a:	4621      	mov	r1, r4
 800124c:	f7ff fb8c 	bl	8000968 <__aeabi_d2uiz>
 8001250:	4601      	mov	r1, r0
 8001252:	e009      	b.n	8001268 <main+0x4c4>
 8001254:	2aaaaaab 	.word	0x2aaaaaab
 8001258:	40654000 	.word	0x40654000
 800125c:	40668000 	.word	0x40668000
 8001260:	40490000 	.word	0x40490000
 8001264:	20000028 	.word	0x20000028
 8001268:	f107 0310 	add.w	r3, r7, #16
 800126c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8001270:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			  sConfigOC.Pulse = pulse[i];
 8001274:	f107 0310 	add.w	r3, r7, #16
 8001278:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800127c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001280:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, channels[i]);
 8001284:	463b      	mov	r3, r7
 8001286:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800128a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800128e:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001292:	4619      	mov	r1, r3
 8001294:	4814      	ldr	r0, [pc, #80]	; (80012e8 <main+0x544>)
 8001296:	f002 f8bd 	bl	8003414 <HAL_TIM_PWM_ConfigChannel>
	  for (int i = 0; i < 4; i++) {
 800129a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800129e:	3301      	adds	r3, #1
 80012a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80012a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80012a8:	2b03      	cmp	r3, #3
 80012aa:	f77f adff 	ble.w	8000eac <main+0x108>
		  }
	  }
	  HAL_TIM_PWM_Init(&htim1);
 80012ae:	480e      	ldr	r0, [pc, #56]	; (80012e8 <main+0x544>)
 80012b0:	f001 ff7a 	bl	80031a8 <HAL_TIM_PWM_Init>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80012b4:	2100      	movs	r1, #0
 80012b6:	480c      	ldr	r0, [pc, #48]	; (80012e8 <main+0x544>)
 80012b8:	f001 ffce 	bl	8003258 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80012bc:	2104      	movs	r1, #4
 80012be:	480a      	ldr	r0, [pc, #40]	; (80012e8 <main+0x544>)
 80012c0:	f001 ffca 	bl	8003258 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80012c4:	2108      	movs	r1, #8
 80012c6:	4808      	ldr	r0, [pc, #32]	; (80012e8 <main+0x544>)
 80012c8:	f001 ffc6 	bl	8003258 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80012cc:	210c      	movs	r1, #12
 80012ce:	4806      	ldr	r0, [pc, #24]	; (80012e8 <main+0x544>)
 80012d0:	f001 ffc2 	bl	8003258 <HAL_TIM_PWM_Start>
	  HAL_Delay(1000);
 80012d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012d8:	f000 fb52 	bl	8001980 <HAL_Delay>
	  count++;
 80012dc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80012e0:	3301      	adds	r3, #1
 80012e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  {
 80012e6:	e5c6      	b.n	8000e76 <main+0xd2>
 80012e8:	20000028 	.word	0x20000028

080012ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b0ac      	sub	sp, #176	; 0xb0
 80012f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012f2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80012f6:	2244      	movs	r2, #68	; 0x44
 80012f8:	2100      	movs	r1, #0
 80012fa:	4618      	mov	r0, r3
 80012fc:	f003 f964 	bl	80045c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001300:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	2254      	movs	r2, #84	; 0x54
 8001314:	2100      	movs	r1, #0
 8001316:	4618      	mov	r0, r3
 8001318:	f003 f956 	bl	80045c8 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800131c:	f000 fdba 	bl	8001e94 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001320:	4b32      	ldr	r3, [pc, #200]	; (80013ec <SystemClock_Config+0x100>)
 8001322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001326:	4a31      	ldr	r2, [pc, #196]	; (80013ec <SystemClock_Config+0x100>)
 8001328:	f023 0318 	bic.w	r3, r3, #24
 800132c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001330:	2314      	movs	r3, #20
 8001332:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001334:	2301      	movs	r3, #1
 8001336:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001338:	2301      	movs	r3, #1
 800133a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001344:	2360      	movs	r3, #96	; 0x60
 8001346:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800134a:	2302      	movs	r3, #2
 800134c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001350:	2301      	movs	r3, #1
 8001352:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001356:	2301      	movs	r3, #1
 8001358:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 800135c:	2310      	movs	r3, #16
 800135e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001362:	2307      	movs	r3, #7
 8001364:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001368:	2302      	movs	r3, #2
 800136a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800136e:	2302      	movs	r3, #2
 8001370:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001374:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001378:	4618      	mov	r0, r3
 800137a:	f000 fdff 	bl	8001f7c <HAL_RCC_OscConfig>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001384:	f000 f834 	bl	80013f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001388:	230f      	movs	r3, #15
 800138a:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800138c:	2303      	movs	r3, #3
 800138e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001390:	2300      	movs	r3, #0
 8001392:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001394:	2300      	movs	r3, #0
 8001396:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001398:	2300      	movs	r3, #0
 800139a:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800139c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013a0:	2101      	movs	r1, #1
 80013a2:	4618      	mov	r0, r3
 80013a4:	f001 fa0a 	bl	80027bc <HAL_RCC_ClockConfig>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80013ae:	f000 f81f 	bl	80013f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80013b2:	2302      	movs	r3, #2
 80013b4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013b6:	2300      	movs	r3, #0
 80013b8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	4618      	mov	r0, r3
 80013be:	f001 fc01 	bl	8002bc4 <HAL_RCCEx_PeriphCLKConfig>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80013c8:	f000 f812 	bl	80013f0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013cc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013d0:	f000 fd7e 	bl	8001ed0 <HAL_PWREx_ControlVoltageScaling>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80013da:	f000 f809 	bl	80013f0 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80013de:	f001 fde3 	bl	8002fa8 <HAL_RCCEx_EnableMSIPLLMode>
}
 80013e2:	bf00      	nop
 80013e4:	37b0      	adds	r7, #176	; 0xb0
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40021000 	.word	0x40021000

080013f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
	...

08001400 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001406:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <HAL_MspInit+0x44>)
 8001408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800140a:	4a0e      	ldr	r2, [pc, #56]	; (8001444 <HAL_MspInit+0x44>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6613      	str	r3, [r2, #96]	; 0x60
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <HAL_MspInit+0x44>)
 8001414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <HAL_MspInit+0x44>)
 8001420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001422:	4a08      	ldr	r2, [pc, #32]	; (8001444 <HAL_MspInit+0x44>)
 8001424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001428:	6593      	str	r3, [r2, #88]	; 0x58
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <HAL_MspInit+0x44>)
 800142c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001432:	603b      	str	r3, [r7, #0]
 8001434:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	40021000 	.word	0x40021000

08001448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800145a:	e7fe      	b.n	800145a <HardFault_Handler+0x4>

0800145c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001460:	e7fe      	b.n	8001460 <MemManage_Handler+0x4>

08001462 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001466:	e7fe      	b.n	8001466 <BusFault_Handler+0x4>

08001468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800146c:	e7fe      	b.n	800146c <UsageFault_Handler+0x4>

0800146e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800149c:	f000 fa50 	bl	8001940 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014a8:	4b17      	ldr	r3, [pc, #92]	; (8001508 <SystemInit+0x64>)
 80014aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ae:	4a16      	ldr	r2, [pc, #88]	; (8001508 <SystemInit+0x64>)
 80014b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80014b8:	4b14      	ldr	r3, [pc, #80]	; (800150c <SystemInit+0x68>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a13      	ldr	r2, [pc, #76]	; (800150c <SystemInit+0x68>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80014c4:	4b11      	ldr	r3, [pc, #68]	; (800150c <SystemInit+0x68>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80014ca:	4b10      	ldr	r3, [pc, #64]	; (800150c <SystemInit+0x68>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a0f      	ldr	r2, [pc, #60]	; (800150c <SystemInit+0x68>)
 80014d0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80014d4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80014d8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80014da:	4b0c      	ldr	r3, [pc, #48]	; (800150c <SystemInit+0x68>)
 80014dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014e0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014e2:	4b0a      	ldr	r3, [pc, #40]	; (800150c <SystemInit+0x68>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a09      	ldr	r2, [pc, #36]	; (800150c <SystemInit+0x68>)
 80014e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80014ee:	4b07      	ldr	r3, [pc, #28]	; (800150c <SystemInit+0x68>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014f4:	4b04      	ldr	r3, [pc, #16]	; (8001508 <SystemInit+0x64>)
 80014f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014fa:	609a      	str	r2, [r3, #8]
#endif
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	e000ed00 	.word	0xe000ed00
 800150c:	40021000 	.word	0x40021000

08001510 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b096      	sub	sp, #88	; 0x58
 8001514:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001516:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001522:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
 8001530:	611a      	str	r2, [r3, #16]
 8001532:	615a      	str	r2, [r3, #20]
 8001534:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	222c      	movs	r2, #44	; 0x2c
 800153a:	2100      	movs	r1, #0
 800153c:	4618      	mov	r0, r3
 800153e:	f003 f843 	bl	80045c8 <memset>

  htim1.Instance = TIM1;
 8001542:	4b4e      	ldr	r3, [pc, #312]	; (800167c <MX_TIM1_Init+0x16c>)
 8001544:	4a4e      	ldr	r2, [pc, #312]	; (8001680 <MX_TIM1_Init+0x170>)
 8001546:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = (SystemCoreClock / 2) / 50000 - 1;
 8001548:	4b4e      	ldr	r3, [pc, #312]	; (8001684 <MX_TIM1_Init+0x174>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	095b      	lsrs	r3, r3, #5
 800154e:	4a4e      	ldr	r2, [pc, #312]	; (8001688 <MX_TIM1_Init+0x178>)
 8001550:	fba2 2303 	umull	r2, r3, r2, r3
 8001554:	09db      	lsrs	r3, r3, #7
 8001556:	3b01      	subs	r3, #1
 8001558:	4a48      	ldr	r2, [pc, #288]	; (800167c <MX_TIM1_Init+0x16c>)
 800155a:	6053      	str	r3, [r2, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800155c:	4b47      	ldr	r3, [pc, #284]	; (800167c <MX_TIM1_Init+0x16c>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001562:	4b46      	ldr	r3, [pc, #280]	; (800167c <MX_TIM1_Init+0x16c>)
 8001564:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001568:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800156a:	4b44      	ldr	r3, [pc, #272]	; (800167c <MX_TIM1_Init+0x16c>)
 800156c:	2200      	movs	r2, #0
 800156e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001570:	4b42      	ldr	r3, [pc, #264]	; (800167c <MX_TIM1_Init+0x16c>)
 8001572:	2200      	movs	r2, #0
 8001574:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001576:	4b41      	ldr	r3, [pc, #260]	; (800167c <MX_TIM1_Init+0x16c>)
 8001578:	2280      	movs	r2, #128	; 0x80
 800157a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800157c:	483f      	ldr	r0, [pc, #252]	; (800167c <MX_TIM1_Init+0x16c>)
 800157e:	f001 fe13 	bl	80031a8 <HAL_TIM_PWM_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001588:	f7ff ff32 	bl	80013f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158c:	2300      	movs	r3, #0
 800158e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001590:	2300      	movs	r3, #0
 8001592:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001594:	2300      	movs	r3, #0
 8001596:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001598:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800159c:	4619      	mov	r1, r3
 800159e:	4837      	ldr	r0, [pc, #220]	; (800167c <MX_TIM1_Init+0x16c>)
 80015a0:	f002 fb50 	bl	8003c44 <HAL_TIMEx_MasterConfigSynchronization>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80015aa:	f7ff ff21 	bl	80013f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ae:	2360      	movs	r3, #96	; 0x60
 80015b0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015b6:	2300      	movs	r3, #0
 80015b8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015ba:	2300      	movs	r3, #0
 80015bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015be:	2300      	movs	r3, #0
 80015c0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015c2:	2300      	movs	r3, #0
 80015c4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015c6:	2300      	movs	r3, #0
 80015c8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015ce:	2200      	movs	r2, #0
 80015d0:	4619      	mov	r1, r3
 80015d2:	482a      	ldr	r0, [pc, #168]	; (800167c <MX_TIM1_Init+0x16c>)
 80015d4:	f001 ff1e 	bl	8003414 <HAL_TIM_PWM_ConfigChannel>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 80015de:	f7ff ff07 	bl	80013f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015e6:	2204      	movs	r2, #4
 80015e8:	4619      	mov	r1, r3
 80015ea:	4824      	ldr	r0, [pc, #144]	; (800167c <MX_TIM1_Init+0x16c>)
 80015ec:	f001 ff12 	bl	8003414 <HAL_TIM_PWM_ConfigChannel>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_TIM1_Init+0xea>
  {
    Error_Handler();
 80015f6:	f7ff fefb 	bl	80013f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015fe:	2208      	movs	r2, #8
 8001600:	4619      	mov	r1, r3
 8001602:	481e      	ldr	r0, [pc, #120]	; (800167c <MX_TIM1_Init+0x16c>)
 8001604:	f001 ff06 	bl	8003414 <HAL_TIM_PWM_ConfigChannel>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 800160e:	f7ff feef 	bl	80013f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001612:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001616:	220c      	movs	r2, #12
 8001618:	4619      	mov	r1, r3
 800161a:	4818      	ldr	r0, [pc, #96]	; (800167c <MX_TIM1_Init+0x16c>)
 800161c:	f001 fefa 	bl	8003414 <HAL_TIM_PWM_ConfigChannel>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM1_Init+0x11a>
  {
    Error_Handler();
 8001626:	f7ff fee3 	bl	80013f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800162a:	2300      	movs	r3, #0
 800162c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800163e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001642:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001648:	2300      	movs	r3, #0
 800164a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800164c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001656:	2300      	movs	r3, #0
 8001658:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	4619      	mov	r1, r3
 800165e:	4807      	ldr	r0, [pc, #28]	; (800167c <MX_TIM1_Init+0x16c>)
 8001660:	f002 fb56 	bl	8003d10 <HAL_TIMEx_ConfigBreakDeadTime>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM1_Init+0x15e>
  {
    Error_Handler();
 800166a:	f7ff fec1 	bl	80013f0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800166e:	4803      	ldr	r0, [pc, #12]	; (800167c <MX_TIM1_Init+0x16c>)
 8001670:	f000 f82c 	bl	80016cc <HAL_TIM_MspPostInit>

}
 8001674:	bf00      	nop
 8001676:	3758      	adds	r7, #88	; 0x58
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000028 	.word	0x20000028
 8001680:	40012c00 	.word	0x40012c00
 8001684:	20000000 	.word	0x20000000
 8001688:	0a7c5ac5 	.word	0x0a7c5ac5

0800168c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a0a      	ldr	r2, [pc, #40]	; (80016c4 <HAL_TIM_PWM_MspInit+0x38>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d10b      	bne.n	80016b6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800169e:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <HAL_TIM_PWM_MspInit+0x3c>)
 80016a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016a2:	4a09      	ldr	r2, [pc, #36]	; (80016c8 <HAL_TIM_PWM_MspInit+0x3c>)
 80016a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016a8:	6613      	str	r3, [r2, #96]	; 0x60
 80016aa:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <HAL_TIM_PWM_MspInit+0x3c>)
 80016ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80016b6:	bf00      	nop
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	40012c00 	.word	0x40012c00
 80016c8:	40021000 	.word	0x40021000

080016cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b088      	sub	sp, #32
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 030c 	add.w	r3, r7, #12
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a12      	ldr	r2, [pc, #72]	; (8001734 <HAL_TIM_MspPostInit+0x68>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d11d      	bne.n	800172a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ee:	4b12      	ldr	r3, [pc, #72]	; (8001738 <HAL_TIM_MspPostInit+0x6c>)
 80016f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f2:	4a11      	ldr	r2, [pc, #68]	; (8001738 <HAL_TIM_MspPostInit+0x6c>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016fa:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <HAL_TIM_MspPostInit+0x6c>)
 80016fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001706:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800170a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170c:	2302      	movs	r3, #2
 800170e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001714:	2300      	movs	r3, #0
 8001716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001718:	2301      	movs	r3, #1
 800171a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171c:	f107 030c 	add.w	r3, r7, #12
 8001720:	4619      	mov	r1, r3
 8001722:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001726:	f000 fa33 	bl	8001b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800172a:	bf00      	nop
 800172c:	3720      	adds	r7, #32
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40012c00 	.word	0x40012c00
 8001738:	40021000 	.word	0x40021000

0800173c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001740:	4b14      	ldr	r3, [pc, #80]	; (8001794 <MX_USART2_UART_Init+0x58>)
 8001742:	4a15      	ldr	r2, [pc, #84]	; (8001798 <MX_USART2_UART_Init+0x5c>)
 8001744:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001746:	4b13      	ldr	r3, [pc, #76]	; (8001794 <MX_USART2_UART_Init+0x58>)
 8001748:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800174c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <MX_USART2_UART_Init+0x58>)
 8001750:	2200      	movs	r2, #0
 8001752:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001754:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <MX_USART2_UART_Init+0x58>)
 8001756:	2200      	movs	r2, #0
 8001758:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800175a:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <MX_USART2_UART_Init+0x58>)
 800175c:	2200      	movs	r2, #0
 800175e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001760:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <MX_USART2_UART_Init+0x58>)
 8001762:	220c      	movs	r2, #12
 8001764:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001766:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <MX_USART2_UART_Init+0x58>)
 8001768:	2200      	movs	r2, #0
 800176a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800176c:	4b09      	ldr	r3, [pc, #36]	; (8001794 <MX_USART2_UART_Init+0x58>)
 800176e:	2200      	movs	r2, #0
 8001770:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001772:	4b08      	ldr	r3, [pc, #32]	; (8001794 <MX_USART2_UART_Init+0x58>)
 8001774:	2200      	movs	r2, #0
 8001776:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <MX_USART2_UART_Init+0x58>)
 800177a:	2200      	movs	r2, #0
 800177c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800177e:	4805      	ldr	r0, [pc, #20]	; (8001794 <MX_USART2_UART_Init+0x58>)
 8001780:	f002 fb3e 	bl	8003e00 <HAL_UART_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800178a:	f7ff fe31 	bl	80013f0 <Error_Handler>
  }

}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000074 	.word	0x20000074
 8001798:	40004400 	.word	0x40004400

0800179c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	; 0x28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a20      	ldr	r2, [pc, #128]	; (800183c <HAL_UART_MspInit+0xa0>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d13a      	bne.n	8001834 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017be:	4b20      	ldr	r3, [pc, #128]	; (8001840 <HAL_UART_MspInit+0xa4>)
 80017c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c2:	4a1f      	ldr	r2, [pc, #124]	; (8001840 <HAL_UART_MspInit+0xa4>)
 80017c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c8:	6593      	str	r3, [r2, #88]	; 0x58
 80017ca:	4b1d      	ldr	r3, [pc, #116]	; (8001840 <HAL_UART_MspInit+0xa4>)
 80017cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d6:	4b1a      	ldr	r3, [pc, #104]	; (8001840 <HAL_UART_MspInit+0xa4>)
 80017d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017da:	4a19      	ldr	r2, [pc, #100]	; (8001840 <HAL_UART_MspInit+0xa4>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017e2:	4b17      	ldr	r3, [pc, #92]	; (8001840 <HAL_UART_MspInit+0xa4>)
 80017e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80017ee:	2304      	movs	r3, #4
 80017f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f2:	2302      	movs	r3, #2
 80017f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fa:	2303      	movs	r3, #3
 80017fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017fe:	2307      	movs	r3, #7
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001802:	f107 0314 	add.w	r3, r7, #20
 8001806:	4619      	mov	r1, r3
 8001808:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800180c:	f000 f9c0 	bl	8001b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001810:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001816:	2302      	movs	r3, #2
 8001818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181e:	2303      	movs	r3, #3
 8001820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001822:	2303      	movs	r3, #3
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001826:	f107 0314 	add.w	r3, r7, #20
 800182a:	4619      	mov	r1, r3
 800182c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001830:	f000 f9ae 	bl	8001b90 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001834:	bf00      	nop
 8001836:	3728      	adds	r7, #40	; 0x28
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40004400 	.word	0x40004400
 8001840:	40021000 	.word	0x40021000

08001844 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001844:	f8df d034 	ldr.w	sp, [pc, #52]	; 800187c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001848:	f7ff fe2c 	bl	80014a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800184c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800184e:	e003      	b.n	8001858 <LoopCopyDataInit>

08001850 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001850:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001852:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001854:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001856:	3104      	adds	r1, #4

08001858 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001858:	480a      	ldr	r0, [pc, #40]	; (8001884 <LoopForever+0xa>)
	ldr	r3, =_edata
 800185a:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <LoopForever+0xe>)
	adds	r2, r0, r1
 800185c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800185e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001860:	d3f6      	bcc.n	8001850 <CopyDataInit>
	ldr	r2, =_sbss
 8001862:	4a0a      	ldr	r2, [pc, #40]	; (800188c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001864:	e002      	b.n	800186c <LoopFillZerobss>

08001866 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001866:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001868:	f842 3b04 	str.w	r3, [r2], #4

0800186c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800186c:	4b08      	ldr	r3, [pc, #32]	; (8001890 <LoopForever+0x16>)
	cmp	r2, r3
 800186e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001870:	d3f9      	bcc.n	8001866 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001872:	f002 fe85 	bl	8004580 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001876:	f7ff fa95 	bl	8000da4 <main>

0800187a <LoopForever>:

LoopForever:
    b LoopForever
 800187a:	e7fe      	b.n	800187a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800187c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001880:	08004738 	.word	0x08004738
	ldr	r0, =_sdata
 8001884:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001888:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800188c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001890:	200000f8 	.word	0x200000f8

08001894 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001894:	e7fe      	b.n	8001894 <ADC1_IRQHandler>

08001896 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800189c:	2300      	movs	r3, #0
 800189e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a0:	2003      	movs	r0, #3
 80018a2:	f000 f941 	bl	8001b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018a6:	2000      	movs	r0, #0
 80018a8:	f000 f80e 	bl	80018c8 <HAL_InitTick>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d002      	beq.n	80018b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	71fb      	strb	r3, [r7, #7]
 80018b6:	e001      	b.n	80018bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018b8:	f7ff fda2 	bl	8001400 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018bc:	79fb      	ldrb	r3, [r7, #7]
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018d0:	2300      	movs	r3, #0
 80018d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018d4:	4b17      	ldr	r3, [pc, #92]	; (8001934 <HAL_InitTick+0x6c>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d023      	beq.n	8001924 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80018dc:	4b16      	ldr	r3, [pc, #88]	; (8001938 <HAL_InitTick+0x70>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4b14      	ldr	r3, [pc, #80]	; (8001934 <HAL_InitTick+0x6c>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	4619      	mov	r1, r3
 80018e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f2:	4618      	mov	r0, r3
 80018f4:	f000 f93f 	bl	8001b76 <HAL_SYSTICK_Config>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10f      	bne.n	800191e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b0f      	cmp	r3, #15
 8001902:	d809      	bhi.n	8001918 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001904:	2200      	movs	r2, #0
 8001906:	6879      	ldr	r1, [r7, #4]
 8001908:	f04f 30ff 	mov.w	r0, #4294967295
 800190c:	f000 f917 	bl	8001b3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001910:	4a0a      	ldr	r2, [pc, #40]	; (800193c <HAL_InitTick+0x74>)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	e007      	b.n	8001928 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	73fb      	strb	r3, [r7, #15]
 800191c:	e004      	b.n	8001928 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	73fb      	strb	r3, [r7, #15]
 8001922:	e001      	b.n	8001928 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001928:	7bfb      	ldrb	r3, [r7, #15]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000008 	.word	0x20000008
 8001938:	20000000 	.word	0x20000000
 800193c:	20000004 	.word	0x20000004

08001940 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001944:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_IncTick+0x20>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	461a      	mov	r2, r3
 800194a:	4b06      	ldr	r3, [pc, #24]	; (8001964 <HAL_IncTick+0x24>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4413      	add	r3, r2
 8001950:	4a04      	ldr	r2, [pc, #16]	; (8001964 <HAL_IncTick+0x24>)
 8001952:	6013      	str	r3, [r2, #0]
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	20000008 	.word	0x20000008
 8001964:	200000f4 	.word	0x200000f4

08001968 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return uwTick;
 800196c:	4b03      	ldr	r3, [pc, #12]	; (800197c <HAL_GetTick+0x14>)
 800196e:	681b      	ldr	r3, [r3, #0]
}
 8001970:	4618      	mov	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	200000f4 	.word	0x200000f4

08001980 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001988:	f7ff ffee 	bl	8001968 <HAL_GetTick>
 800198c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001998:	d005      	beq.n	80019a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800199a:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <HAL_Delay+0x40>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4413      	add	r3, r2
 80019a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019a6:	bf00      	nop
 80019a8:	f7ff ffde 	bl	8001968 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d8f7      	bhi.n	80019a8 <HAL_Delay+0x28>
  {
  }
}
 80019b8:	bf00      	nop
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000008 	.word	0x20000008

080019c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d4:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <__NVIC_SetPriorityGrouping+0x44>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019da:	68ba      	ldr	r2, [r7, #8]
 80019dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019e0:	4013      	ands	r3, r2
 80019e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019f6:	4a04      	ldr	r2, [pc, #16]	; (8001a08 <__NVIC_SetPriorityGrouping+0x44>)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	60d3      	str	r3, [r2, #12]
}
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a10:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <__NVIC_GetPriorityGrouping+0x18>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	0a1b      	lsrs	r3, r3, #8
 8001a16:	f003 0307 	and.w	r3, r3, #7
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	6039      	str	r1, [r7, #0]
 8001a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	db0a      	blt.n	8001a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	490c      	ldr	r1, [pc, #48]	; (8001a74 <__NVIC_SetPriority+0x4c>)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	0112      	lsls	r2, r2, #4
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a50:	e00a      	b.n	8001a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	4908      	ldr	r1, [pc, #32]	; (8001a78 <__NVIC_SetPriority+0x50>)
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	3b04      	subs	r3, #4
 8001a60:	0112      	lsls	r2, r2, #4
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	440b      	add	r3, r1
 8001a66:	761a      	strb	r2, [r3, #24]
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	e000e100 	.word	0xe000e100
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b089      	sub	sp, #36	; 0x24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f1c3 0307 	rsb	r3, r3, #7
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	bf28      	it	cs
 8001a9a:	2304      	movcs	r3, #4
 8001a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	2b06      	cmp	r3, #6
 8001aa4:	d902      	bls.n	8001aac <NVIC_EncodePriority+0x30>
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3b03      	subs	r3, #3
 8001aaa:	e000      	b.n	8001aae <NVIC_EncodePriority+0x32>
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43da      	mvns	r2, r3
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	401a      	ands	r2, r3
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ace:	43d9      	mvns	r1, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad4:	4313      	orrs	r3, r2
         );
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3724      	adds	r7, #36	; 0x24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
	...

08001ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001af4:	d301      	bcc.n	8001afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001af6:	2301      	movs	r3, #1
 8001af8:	e00f      	b.n	8001b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afa:	4a0a      	ldr	r2, [pc, #40]	; (8001b24 <SysTick_Config+0x40>)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b02:	210f      	movs	r1, #15
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295
 8001b08:	f7ff ff8e 	bl	8001a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b0c:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <SysTick_Config+0x40>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b12:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <SysTick_Config+0x40>)
 8001b14:	2207      	movs	r2, #7
 8001b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	e000e010 	.word	0xe000e010

08001b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff ff47 	bl	80019c4 <__NVIC_SetPriorityGrouping>
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b086      	sub	sp, #24
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	4603      	mov	r3, r0
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	607a      	str	r2, [r7, #4]
 8001b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b50:	f7ff ff5c 	bl	8001a0c <__NVIC_GetPriorityGrouping>
 8001b54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	68b9      	ldr	r1, [r7, #8]
 8001b5a:	6978      	ldr	r0, [r7, #20]
 8001b5c:	f7ff ff8e 	bl	8001a7c <NVIC_EncodePriority>
 8001b60:	4602      	mov	r2, r0
 8001b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b66:	4611      	mov	r1, r2
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ff5d 	bl	8001a28 <__NVIC_SetPriority>
}
 8001b6e:	bf00      	nop
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff ffb0 	bl	8001ae4 <SysTick_Config>
 8001b84:	4603      	mov	r3, r0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
	...

08001b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b087      	sub	sp, #28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b9e:	e148      	b.n	8001e32 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bac:	4013      	ands	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f000 813a 	beq.w	8001e2c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d00b      	beq.n	8001bd8 <HAL_GPIO_Init+0x48>
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d007      	beq.n	8001bd8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bcc:	2b11      	cmp	r3, #17
 8001bce:	d003      	beq.n	8001bd8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2b12      	cmp	r3, #18
 8001bd6:	d130      	bne.n	8001c3a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	2203      	movs	r2, #3
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4013      	ands	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	68da      	ldr	r2, [r3, #12]
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c0e:	2201      	movs	r2, #1
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	091b      	lsrs	r3, r3, #4
 8001c24:	f003 0201 	and.w	r2, r3, #1
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	2203      	movs	r2, #3
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	689a      	ldr	r2, [r3, #8]
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_Init+0xea>
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b12      	cmp	r3, #18
 8001c78:	d123      	bne.n	8001cc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	08da      	lsrs	r2, r3, #3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3208      	adds	r2, #8
 8001c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	220f      	movs	r2, #15
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43db      	mvns	r3, r3
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	691a      	ldr	r2, [r3, #16]
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	08da      	lsrs	r2, r3, #3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3208      	adds	r2, #8
 8001cbc:	6939      	ldr	r1, [r7, #16]
 8001cbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	2203      	movs	r2, #3
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 0203 	and.w	r2, r3, #3
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 8094 	beq.w	8001e2c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d04:	4b52      	ldr	r3, [pc, #328]	; (8001e50 <HAL_GPIO_Init+0x2c0>)
 8001d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d08:	4a51      	ldr	r2, [pc, #324]	; (8001e50 <HAL_GPIO_Init+0x2c0>)
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	6613      	str	r3, [r2, #96]	; 0x60
 8001d10:	4b4f      	ldr	r3, [pc, #316]	; (8001e50 <HAL_GPIO_Init+0x2c0>)
 8001d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d1c:	4a4d      	ldr	r2, [pc, #308]	; (8001e54 <HAL_GPIO_Init+0x2c4>)
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	089b      	lsrs	r3, r3, #2
 8001d22:	3302      	adds	r3, #2
 8001d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	f003 0303 	and.w	r3, r3, #3
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	220f      	movs	r2, #15
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d46:	d00d      	beq.n	8001d64 <HAL_GPIO_Init+0x1d4>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a43      	ldr	r2, [pc, #268]	; (8001e58 <HAL_GPIO_Init+0x2c8>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d007      	beq.n	8001d60 <HAL_GPIO_Init+0x1d0>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a42      	ldr	r2, [pc, #264]	; (8001e5c <HAL_GPIO_Init+0x2cc>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d101      	bne.n	8001d5c <HAL_GPIO_Init+0x1cc>
 8001d58:	2302      	movs	r3, #2
 8001d5a:	e004      	b.n	8001d66 <HAL_GPIO_Init+0x1d6>
 8001d5c:	2307      	movs	r3, #7
 8001d5e:	e002      	b.n	8001d66 <HAL_GPIO_Init+0x1d6>
 8001d60:	2301      	movs	r3, #1
 8001d62:	e000      	b.n	8001d66 <HAL_GPIO_Init+0x1d6>
 8001d64:	2300      	movs	r3, #0
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	f002 0203 	and.w	r2, r2, #3
 8001d6c:	0092      	lsls	r2, r2, #2
 8001d6e:	4093      	lsls	r3, r2
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d76:	4937      	ldr	r1, [pc, #220]	; (8001e54 <HAL_GPIO_Init+0x2c4>)
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	089b      	lsrs	r3, r3, #2
 8001d7c:	3302      	adds	r3, #2
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d84:	4b36      	ldr	r3, [pc, #216]	; (8001e60 <HAL_GPIO_Init+0x2d0>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	4013      	ands	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d003      	beq.n	8001da8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001da8:	4a2d      	ldr	r2, [pc, #180]	; (8001e60 <HAL_GPIO_Init+0x2d0>)
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001dae:	4b2c      	ldr	r3, [pc, #176]	; (8001e60 <HAL_GPIO_Init+0x2d0>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	43db      	mvns	r3, r3
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001dd2:	4a23      	ldr	r2, [pc, #140]	; (8001e60 <HAL_GPIO_Init+0x2d0>)
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dd8:	4b21      	ldr	r3, [pc, #132]	; (8001e60 <HAL_GPIO_Init+0x2d0>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	43db      	mvns	r3, r3
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	4013      	ands	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d003      	beq.n	8001dfc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001dfc:	4a18      	ldr	r2, [pc, #96]	; (8001e60 <HAL_GPIO_Init+0x2d0>)
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e02:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <HAL_GPIO_Init+0x2d0>)
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e26:	4a0e      	ldr	r2, [pc, #56]	; (8001e60 <HAL_GPIO_Init+0x2d0>)
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	fa22 f303 	lsr.w	r3, r2, r3
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f47f aeaf 	bne.w	8001ba0 <HAL_GPIO_Init+0x10>
  }
}
 8001e42:	bf00      	nop
 8001e44:	371c      	adds	r7, #28
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	40021000 	.word	0x40021000
 8001e54:	40010000 	.word	0x40010000
 8001e58:	48000400 	.word	0x48000400
 8001e5c:	48000800 	.word	0x48000800
 8001e60:	40010400 	.word	0x40010400

08001e64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	807b      	strh	r3, [r7, #2]
 8001e70:	4613      	mov	r3, r2
 8001e72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e74:	787b      	ldrb	r3, [r7, #1]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e7a:	887a      	ldrh	r2, [r7, #2]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e80:	e002      	b.n	8001e88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e82:	887a      	ldrh	r2, [r7, #2]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e98:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea2:	6013      	str	r3, [r2, #0]
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40007000 	.word	0x40007000

08001eb4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001eb8:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <HAL_PWREx_GetVoltageRange+0x18>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	40007000 	.word	0x40007000

08001ed0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ede:	d130      	bne.n	8001f42 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ee0:	4b23      	ldr	r3, [pc, #140]	; (8001f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eec:	d038      	beq.n	8001f60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eee:	4b20      	ldr	r3, [pc, #128]	; (8001f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ef6:	4a1e      	ldr	r2, [pc, #120]	; (8001f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ef8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001efc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001efe:	4b1d      	ldr	r3, [pc, #116]	; (8001f74 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2232      	movs	r2, #50	; 0x32
 8001f04:	fb02 f303 	mul.w	r3, r2, r3
 8001f08:	4a1b      	ldr	r2, [pc, #108]	; (8001f78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0e:	0c9b      	lsrs	r3, r3, #18
 8001f10:	3301      	adds	r3, #1
 8001f12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f14:	e002      	b.n	8001f1c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f1c:	4b14      	ldr	r3, [pc, #80]	; (8001f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f1e:	695b      	ldr	r3, [r3, #20]
 8001f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f28:	d102      	bne.n	8001f30 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1f2      	bne.n	8001f16 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f30:	4b0f      	ldr	r3, [pc, #60]	; (8001f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f32:	695b      	ldr	r3, [r3, #20]
 8001f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f3c:	d110      	bne.n	8001f60 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e00f      	b.n	8001f62 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f42:	4b0b      	ldr	r3, [pc, #44]	; (8001f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f4e:	d007      	beq.n	8001f60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f50:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f58:	4a05      	ldr	r2, [pc, #20]	; (8001f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f5e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	40007000 	.word	0x40007000
 8001f74:	20000000 	.word	0x20000000
 8001f78:	431bde83 	.word	0x431bde83

08001f7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b088      	sub	sp, #32
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d102      	bne.n	8001f90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	f000 bc11 	b.w	80027b2 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f90:	4ba0      	ldr	r3, [pc, #640]	; (8002214 <HAL_RCC_OscConfig+0x298>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 030c 	and.w	r3, r3, #12
 8001f98:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f9a:	4b9e      	ldr	r3, [pc, #632]	; (8002214 <HAL_RCC_OscConfig+0x298>)
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0310 	and.w	r3, r3, #16
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f000 80e4 	beq.w	800217a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d007      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x4c>
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	2b0c      	cmp	r3, #12
 8001fbc:	f040 808b 	bne.w	80020d6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	f040 8087 	bne.w	80020d6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fc8:	4b92      	ldr	r3, [pc, #584]	; (8002214 <HAL_RCC_OscConfig+0x298>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d005      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x64>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e3e8      	b.n	80027b2 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a1a      	ldr	r2, [r3, #32]
 8001fe4:	4b8b      	ldr	r3, [pc, #556]	; (8002214 <HAL_RCC_OscConfig+0x298>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0308 	and.w	r3, r3, #8
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d004      	beq.n	8001ffa <HAL_RCC_OscConfig+0x7e>
 8001ff0:	4b88      	ldr	r3, [pc, #544]	; (8002214 <HAL_RCC_OscConfig+0x298>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ff8:	e005      	b.n	8002006 <HAL_RCC_OscConfig+0x8a>
 8001ffa:	4b86      	ldr	r3, [pc, #536]	; (8002214 <HAL_RCC_OscConfig+0x298>)
 8001ffc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002000:	091b      	lsrs	r3, r3, #4
 8002002:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002006:	4293      	cmp	r3, r2
 8002008:	d223      	bcs.n	8002052 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	4618      	mov	r0, r3
 8002010:	f000 fd78 	bl	8002b04 <RCC_SetFlashLatencyFromMSIRange>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e3c9      	b.n	80027b2 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800201e:	4b7d      	ldr	r3, [pc, #500]	; (8002214 <HAL_RCC_OscConfig+0x298>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a7c      	ldr	r2, [pc, #496]	; (8002214 <HAL_RCC_OscConfig+0x298>)
 8002024:	f043 0308 	orr.w	r3, r3, #8
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	4b7a      	ldr	r3, [pc, #488]	; (8002214 <HAL_RCC_OscConfig+0x298>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	4977      	ldr	r1, [pc, #476]	; (8002214 <HAL_RCC_OscConfig+0x298>)
 8002038:	4313      	orrs	r3, r2
 800203a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800203c:	4b75      	ldr	r3, [pc, #468]	; (8002214 <HAL_RCC_OscConfig+0x298>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	021b      	lsls	r3, r3, #8
 800204a:	4972      	ldr	r1, [pc, #456]	; (8002214 <HAL_RCC_OscConfig+0x298>)
 800204c:	4313      	orrs	r3, r2
 800204e:	604b      	str	r3, [r1, #4]
 8002050:	e025      	b.n	800209e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002052:	4b70      	ldr	r3, [pc, #448]	; (8002214 <HAL_RCC_OscConfig+0x298>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a6f      	ldr	r2, [pc, #444]	; (8002214 <HAL_RCC_OscConfig+0x298>)
 8002058:	f043 0308 	orr.w	r3, r3, #8
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	4b6d      	ldr	r3, [pc, #436]	; (8002214 <HAL_RCC_OscConfig+0x298>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	496a      	ldr	r1, [pc, #424]	; (8002214 <HAL_RCC_OscConfig+0x298>)
 800206c:	4313      	orrs	r3, r2
 800206e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002070:	4b68      	ldr	r3, [pc, #416]	; (8002214 <HAL_RCC_OscConfig+0x298>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	021b      	lsls	r3, r3, #8
 800207e:	4965      	ldr	r1, [pc, #404]	; (8002214 <HAL_RCC_OscConfig+0x298>)
 8002080:	4313      	orrs	r3, r2
 8002082:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d109      	bne.n	800209e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	4618      	mov	r0, r3
 8002090:	f000 fd38 	bl	8002b04 <RCC_SetFlashLatencyFromMSIRange>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e389      	b.n	80027b2 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800209e:	f000 fc6f 	bl	8002980 <HAL_RCC_GetSysClockFreq>
 80020a2:	4601      	mov	r1, r0
 80020a4:	4b5b      	ldr	r3, [pc, #364]	; (8002214 <HAL_RCC_OscConfig+0x298>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	091b      	lsrs	r3, r3, #4
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	4a5a      	ldr	r2, [pc, #360]	; (8002218 <HAL_RCC_OscConfig+0x29c>)
 80020b0:	5cd3      	ldrb	r3, [r2, r3]
 80020b2:	f003 031f 	and.w	r3, r3, #31
 80020b6:	fa21 f303 	lsr.w	r3, r1, r3
 80020ba:	4a58      	ldr	r2, [pc, #352]	; (800221c <HAL_RCC_OscConfig+0x2a0>)
 80020bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80020be:	4b58      	ldr	r3, [pc, #352]	; (8002220 <HAL_RCC_OscConfig+0x2a4>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff fc00 	bl	80018c8 <HAL_InitTick>
 80020c8:	4603      	mov	r3, r0
 80020ca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d052      	beq.n	8002178 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80020d2:	7bfb      	ldrb	r3, [r7, #15]
 80020d4:	e36d      	b.n	80027b2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d032      	beq.n	8002144 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80020de:	4b4d      	ldr	r3, [pc, #308]	; (8002214 <HAL_RCC_OscConfig+0x298>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a4c      	ldr	r2, [pc, #304]	; (8002214 <HAL_RCC_OscConfig+0x298>)
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020ea:	f7ff fc3d 	bl	8001968 <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020f2:	f7ff fc39 	bl	8001968 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e356      	b.n	80027b2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002104:	4b43      	ldr	r3, [pc, #268]	; (8002214 <HAL_RCC_OscConfig+0x298>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0f0      	beq.n	80020f2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002110:	4b40      	ldr	r3, [pc, #256]	; (8002214 <HAL_RCC_OscConfig+0x298>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a3f      	ldr	r2, [pc, #252]	; (8002214 <HAL_RCC_OscConfig+0x298>)
 8002116:	f043 0308 	orr.w	r3, r3, #8
 800211a:	6013      	str	r3, [r2, #0]
 800211c:	4b3d      	ldr	r3, [pc, #244]	; (8002214 <HAL_RCC_OscConfig+0x298>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	493a      	ldr	r1, [pc, #232]	; (8002214 <HAL_RCC_OscConfig+0x298>)
 800212a:	4313      	orrs	r3, r2
 800212c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800212e:	4b39      	ldr	r3, [pc, #228]	; (8002214 <HAL_RCC_OscConfig+0x298>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	021b      	lsls	r3, r3, #8
 800213c:	4935      	ldr	r1, [pc, #212]	; (8002214 <HAL_RCC_OscConfig+0x298>)
 800213e:	4313      	orrs	r3, r2
 8002140:	604b      	str	r3, [r1, #4]
 8002142:	e01a      	b.n	800217a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002144:	4b33      	ldr	r3, [pc, #204]	; (8002214 <HAL_RCC_OscConfig+0x298>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a32      	ldr	r2, [pc, #200]	; (8002214 <HAL_RCC_OscConfig+0x298>)
 800214a:	f023 0301 	bic.w	r3, r3, #1
 800214e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002150:	f7ff fc0a 	bl	8001968 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002158:	f7ff fc06 	bl	8001968 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e323      	b.n	80027b2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800216a:	4b2a      	ldr	r3, [pc, #168]	; (8002214 <HAL_RCC_OscConfig+0x298>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f0      	bne.n	8002158 <HAL_RCC_OscConfig+0x1dc>
 8002176:	e000      	b.n	800217a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002178:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d073      	beq.n	800226e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	2b08      	cmp	r3, #8
 800218a:	d005      	beq.n	8002198 <HAL_RCC_OscConfig+0x21c>
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	2b0c      	cmp	r3, #12
 8002190:	d10e      	bne.n	80021b0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	2b03      	cmp	r3, #3
 8002196:	d10b      	bne.n	80021b0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002198:	4b1e      	ldr	r3, [pc, #120]	; (8002214 <HAL_RCC_OscConfig+0x298>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d063      	beq.n	800226c <HAL_RCC_OscConfig+0x2f0>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d15f      	bne.n	800226c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e300      	b.n	80027b2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021b8:	d106      	bne.n	80021c8 <HAL_RCC_OscConfig+0x24c>
 80021ba:	4b16      	ldr	r3, [pc, #88]	; (8002214 <HAL_RCC_OscConfig+0x298>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a15      	ldr	r2, [pc, #84]	; (8002214 <HAL_RCC_OscConfig+0x298>)
 80021c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	e01d      	b.n	8002204 <HAL_RCC_OscConfig+0x288>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021d0:	d10c      	bne.n	80021ec <HAL_RCC_OscConfig+0x270>
 80021d2:	4b10      	ldr	r3, [pc, #64]	; (8002214 <HAL_RCC_OscConfig+0x298>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a0f      	ldr	r2, [pc, #60]	; (8002214 <HAL_RCC_OscConfig+0x298>)
 80021d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021dc:	6013      	str	r3, [r2, #0]
 80021de:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <HAL_RCC_OscConfig+0x298>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a0c      	ldr	r2, [pc, #48]	; (8002214 <HAL_RCC_OscConfig+0x298>)
 80021e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	e00b      	b.n	8002204 <HAL_RCC_OscConfig+0x288>
 80021ec:	4b09      	ldr	r3, [pc, #36]	; (8002214 <HAL_RCC_OscConfig+0x298>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a08      	ldr	r2, [pc, #32]	; (8002214 <HAL_RCC_OscConfig+0x298>)
 80021f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021f6:	6013      	str	r3, [r2, #0]
 80021f8:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_RCC_OscConfig+0x298>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a05      	ldr	r2, [pc, #20]	; (8002214 <HAL_RCC_OscConfig+0x298>)
 80021fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002202:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d01b      	beq.n	8002244 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220c:	f7ff fbac 	bl	8001968 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002212:	e010      	b.n	8002236 <HAL_RCC_OscConfig+0x2ba>
 8002214:	40021000 	.word	0x40021000
 8002218:	080046e0 	.word	0x080046e0
 800221c:	20000000 	.word	0x20000000
 8002220:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002224:	f7ff fba0 	bl	8001968 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b64      	cmp	r3, #100	; 0x64
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e2bd      	b.n	80027b2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002236:	4baf      	ldr	r3, [pc, #700]	; (80024f4 <HAL_RCC_OscConfig+0x578>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0f0      	beq.n	8002224 <HAL_RCC_OscConfig+0x2a8>
 8002242:	e014      	b.n	800226e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002244:	f7ff fb90 	bl	8001968 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800224c:	f7ff fb8c 	bl	8001968 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b64      	cmp	r3, #100	; 0x64
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e2a9      	b.n	80027b2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800225e:	4ba5      	ldr	r3, [pc, #660]	; (80024f4 <HAL_RCC_OscConfig+0x578>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0x2d0>
 800226a:	e000      	b.n	800226e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800226c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d060      	beq.n	800233c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	2b04      	cmp	r3, #4
 800227e:	d005      	beq.n	800228c <HAL_RCC_OscConfig+0x310>
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	2b0c      	cmp	r3, #12
 8002284:	d119      	bne.n	80022ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	2b02      	cmp	r3, #2
 800228a:	d116      	bne.n	80022ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800228c:	4b99      	ldr	r3, [pc, #612]	; (80024f4 <HAL_RCC_OscConfig+0x578>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002294:	2b00      	cmp	r3, #0
 8002296:	d005      	beq.n	80022a4 <HAL_RCC_OscConfig+0x328>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e286      	b.n	80027b2 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a4:	4b93      	ldr	r3, [pc, #588]	; (80024f4 <HAL_RCC_OscConfig+0x578>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	061b      	lsls	r3, r3, #24
 80022b2:	4990      	ldr	r1, [pc, #576]	; (80024f4 <HAL_RCC_OscConfig+0x578>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022b8:	e040      	b.n	800233c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d023      	beq.n	800230a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022c2:	4b8c      	ldr	r3, [pc, #560]	; (80024f4 <HAL_RCC_OscConfig+0x578>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a8b      	ldr	r2, [pc, #556]	; (80024f4 <HAL_RCC_OscConfig+0x578>)
 80022c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ce:	f7ff fb4b 	bl	8001968 <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022d6:	f7ff fb47 	bl	8001968 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e264      	b.n	80027b2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022e8:	4b82      	ldr	r3, [pc, #520]	; (80024f4 <HAL_RCC_OscConfig+0x578>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0f0      	beq.n	80022d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f4:	4b7f      	ldr	r3, [pc, #508]	; (80024f4 <HAL_RCC_OscConfig+0x578>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	061b      	lsls	r3, r3, #24
 8002302:	497c      	ldr	r1, [pc, #496]	; (80024f4 <HAL_RCC_OscConfig+0x578>)
 8002304:	4313      	orrs	r3, r2
 8002306:	604b      	str	r3, [r1, #4]
 8002308:	e018      	b.n	800233c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800230a:	4b7a      	ldr	r3, [pc, #488]	; (80024f4 <HAL_RCC_OscConfig+0x578>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a79      	ldr	r2, [pc, #484]	; (80024f4 <HAL_RCC_OscConfig+0x578>)
 8002310:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002314:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002316:	f7ff fb27 	bl	8001968 <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800231e:	f7ff fb23 	bl	8001968 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e240      	b.n	80027b2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002330:	4b70      	ldr	r3, [pc, #448]	; (80024f4 <HAL_RCC_OscConfig+0x578>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1f0      	bne.n	800231e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0308 	and.w	r3, r3, #8
 8002344:	2b00      	cmp	r3, #0
 8002346:	d03c      	beq.n	80023c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d01c      	beq.n	800238a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002350:	4b68      	ldr	r3, [pc, #416]	; (80024f4 <HAL_RCC_OscConfig+0x578>)
 8002352:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002356:	4a67      	ldr	r2, [pc, #412]	; (80024f4 <HAL_RCC_OscConfig+0x578>)
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002360:	f7ff fb02 	bl	8001968 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002368:	f7ff fafe 	bl	8001968 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e21b      	b.n	80027b2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800237a:	4b5e      	ldr	r3, [pc, #376]	; (80024f4 <HAL_RCC_OscConfig+0x578>)
 800237c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0ef      	beq.n	8002368 <HAL_RCC_OscConfig+0x3ec>
 8002388:	e01b      	b.n	80023c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800238a:	4b5a      	ldr	r3, [pc, #360]	; (80024f4 <HAL_RCC_OscConfig+0x578>)
 800238c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002390:	4a58      	ldr	r2, [pc, #352]	; (80024f4 <HAL_RCC_OscConfig+0x578>)
 8002392:	f023 0301 	bic.w	r3, r3, #1
 8002396:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800239a:	f7ff fae5 	bl	8001968 <HAL_GetTick>
 800239e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023a0:	e008      	b.n	80023b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023a2:	f7ff fae1 	bl	8001968 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e1fe      	b.n	80027b2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023b4:	4b4f      	ldr	r3, [pc, #316]	; (80024f4 <HAL_RCC_OscConfig+0x578>)
 80023b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1ef      	bne.n	80023a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f000 80a6 	beq.w	800251c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d0:	2300      	movs	r3, #0
 80023d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80023d4:	4b47      	ldr	r3, [pc, #284]	; (80024f4 <HAL_RCC_OscConfig+0x578>)
 80023d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d10d      	bne.n	80023fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e0:	4b44      	ldr	r3, [pc, #272]	; (80024f4 <HAL_RCC_OscConfig+0x578>)
 80023e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e4:	4a43      	ldr	r2, [pc, #268]	; (80024f4 <HAL_RCC_OscConfig+0x578>)
 80023e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ea:	6593      	str	r3, [r2, #88]	; 0x58
 80023ec:	4b41      	ldr	r3, [pc, #260]	; (80024f4 <HAL_RCC_OscConfig+0x578>)
 80023ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023f8:	2301      	movs	r3, #1
 80023fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023fc:	4b3e      	ldr	r3, [pc, #248]	; (80024f8 <HAL_RCC_OscConfig+0x57c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002404:	2b00      	cmp	r3, #0
 8002406:	d118      	bne.n	800243a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002408:	4b3b      	ldr	r3, [pc, #236]	; (80024f8 <HAL_RCC_OscConfig+0x57c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a3a      	ldr	r2, [pc, #232]	; (80024f8 <HAL_RCC_OscConfig+0x57c>)
 800240e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002412:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002414:	f7ff faa8 	bl	8001968 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800241c:	f7ff faa4 	bl	8001968 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e1c1      	b.n	80027b2 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800242e:	4b32      	ldr	r3, [pc, #200]	; (80024f8 <HAL_RCC_OscConfig+0x57c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0f0      	beq.n	800241c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d108      	bne.n	8002454 <HAL_RCC_OscConfig+0x4d8>
 8002442:	4b2c      	ldr	r3, [pc, #176]	; (80024f4 <HAL_RCC_OscConfig+0x578>)
 8002444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002448:	4a2a      	ldr	r2, [pc, #168]	; (80024f4 <HAL_RCC_OscConfig+0x578>)
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002452:	e024      	b.n	800249e <HAL_RCC_OscConfig+0x522>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	2b05      	cmp	r3, #5
 800245a:	d110      	bne.n	800247e <HAL_RCC_OscConfig+0x502>
 800245c:	4b25      	ldr	r3, [pc, #148]	; (80024f4 <HAL_RCC_OscConfig+0x578>)
 800245e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002462:	4a24      	ldr	r2, [pc, #144]	; (80024f4 <HAL_RCC_OscConfig+0x578>)
 8002464:	f043 0304 	orr.w	r3, r3, #4
 8002468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800246c:	4b21      	ldr	r3, [pc, #132]	; (80024f4 <HAL_RCC_OscConfig+0x578>)
 800246e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002472:	4a20      	ldr	r2, [pc, #128]	; (80024f4 <HAL_RCC_OscConfig+0x578>)
 8002474:	f043 0301 	orr.w	r3, r3, #1
 8002478:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800247c:	e00f      	b.n	800249e <HAL_RCC_OscConfig+0x522>
 800247e:	4b1d      	ldr	r3, [pc, #116]	; (80024f4 <HAL_RCC_OscConfig+0x578>)
 8002480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002484:	4a1b      	ldr	r2, [pc, #108]	; (80024f4 <HAL_RCC_OscConfig+0x578>)
 8002486:	f023 0301 	bic.w	r3, r3, #1
 800248a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800248e:	4b19      	ldr	r3, [pc, #100]	; (80024f4 <HAL_RCC_OscConfig+0x578>)
 8002490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002494:	4a17      	ldr	r2, [pc, #92]	; (80024f4 <HAL_RCC_OscConfig+0x578>)
 8002496:	f023 0304 	bic.w	r3, r3, #4
 800249a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d016      	beq.n	80024d4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a6:	f7ff fa5f 	bl	8001968 <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024ac:	e00a      	b.n	80024c4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ae:	f7ff fa5b 	bl	8001968 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024bc:	4293      	cmp	r3, r2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e176      	b.n	80027b2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024c4:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <HAL_RCC_OscConfig+0x578>)
 80024c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0ed      	beq.n	80024ae <HAL_RCC_OscConfig+0x532>
 80024d2:	e01a      	b.n	800250a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d4:	f7ff fa48 	bl	8001968 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024da:	e00f      	b.n	80024fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024dc:	f7ff fa44 	bl	8001968 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d906      	bls.n	80024fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e15f      	b.n	80027b2 <HAL_RCC_OscConfig+0x836>
 80024f2:	bf00      	nop
 80024f4:	40021000 	.word	0x40021000
 80024f8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024fc:	4baa      	ldr	r3, [pc, #680]	; (80027a8 <HAL_RCC_OscConfig+0x82c>)
 80024fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1e8      	bne.n	80024dc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800250a:	7ffb      	ldrb	r3, [r7, #31]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d105      	bne.n	800251c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002510:	4ba5      	ldr	r3, [pc, #660]	; (80027a8 <HAL_RCC_OscConfig+0x82c>)
 8002512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002514:	4aa4      	ldr	r2, [pc, #656]	; (80027a8 <HAL_RCC_OscConfig+0x82c>)
 8002516:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800251a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0320 	and.w	r3, r3, #32
 8002524:	2b00      	cmp	r3, #0
 8002526:	d03c      	beq.n	80025a2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	2b00      	cmp	r3, #0
 800252e:	d01c      	beq.n	800256a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002530:	4b9d      	ldr	r3, [pc, #628]	; (80027a8 <HAL_RCC_OscConfig+0x82c>)
 8002532:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002536:	4a9c      	ldr	r2, [pc, #624]	; (80027a8 <HAL_RCC_OscConfig+0x82c>)
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002540:	f7ff fa12 	bl	8001968 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002548:	f7ff fa0e 	bl	8001968 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e12b      	b.n	80027b2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800255a:	4b93      	ldr	r3, [pc, #588]	; (80027a8 <HAL_RCC_OscConfig+0x82c>)
 800255c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0ef      	beq.n	8002548 <HAL_RCC_OscConfig+0x5cc>
 8002568:	e01b      	b.n	80025a2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800256a:	4b8f      	ldr	r3, [pc, #572]	; (80027a8 <HAL_RCC_OscConfig+0x82c>)
 800256c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002570:	4a8d      	ldr	r2, [pc, #564]	; (80027a8 <HAL_RCC_OscConfig+0x82c>)
 8002572:	f023 0301 	bic.w	r3, r3, #1
 8002576:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800257a:	f7ff f9f5 	bl	8001968 <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002580:	e008      	b.n	8002594 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002582:	f7ff f9f1 	bl	8001968 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e10e      	b.n	80027b2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002594:	4b84      	ldr	r3, [pc, #528]	; (80027a8 <HAL_RCC_OscConfig+0x82c>)
 8002596:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1ef      	bne.n	8002582 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f000 8102 	beq.w	80027b0 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	f040 80c5 	bne.w	8002740 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80025b6:	4b7c      	ldr	r3, [pc, #496]	; (80027a8 <HAL_RCC_OscConfig+0x82c>)
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	f003 0203 	and.w	r2, r3, #3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d12c      	bne.n	8002624 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d4:	3b01      	subs	r3, #1
 80025d6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d8:	429a      	cmp	r2, r3
 80025da:	d123      	bne.n	8002624 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d11b      	bne.n	8002624 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d113      	bne.n	8002624 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002606:	085b      	lsrs	r3, r3, #1
 8002608:	3b01      	subs	r3, #1
 800260a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800260c:	429a      	cmp	r2, r3
 800260e:	d109      	bne.n	8002624 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	085b      	lsrs	r3, r3, #1
 800261c:	3b01      	subs	r3, #1
 800261e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002620:	429a      	cmp	r2, r3
 8002622:	d067      	beq.n	80026f4 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	2b0c      	cmp	r3, #12
 8002628:	d062      	beq.n	80026f0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800262a:	4b5f      	ldr	r3, [pc, #380]	; (80027a8 <HAL_RCC_OscConfig+0x82c>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e0bb      	b.n	80027b2 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800263a:	4b5b      	ldr	r3, [pc, #364]	; (80027a8 <HAL_RCC_OscConfig+0x82c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a5a      	ldr	r2, [pc, #360]	; (80027a8 <HAL_RCC_OscConfig+0x82c>)
 8002640:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002644:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002646:	f7ff f98f 	bl	8001968 <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800264e:	f7ff f98b 	bl	8001968 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e0a8      	b.n	80027b2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002660:	4b51      	ldr	r3, [pc, #324]	; (80027a8 <HAL_RCC_OscConfig+0x82c>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1f0      	bne.n	800264e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800266c:	4b4e      	ldr	r3, [pc, #312]	; (80027a8 <HAL_RCC_OscConfig+0x82c>)
 800266e:	68da      	ldr	r2, [r3, #12]
 8002670:	4b4e      	ldr	r3, [pc, #312]	; (80027ac <HAL_RCC_OscConfig+0x830>)
 8002672:	4013      	ands	r3, r2
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800267c:	3a01      	subs	r2, #1
 800267e:	0112      	lsls	r2, r2, #4
 8002680:	4311      	orrs	r1, r2
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002686:	0212      	lsls	r2, r2, #8
 8002688:	4311      	orrs	r1, r2
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800268e:	0852      	lsrs	r2, r2, #1
 8002690:	3a01      	subs	r2, #1
 8002692:	0552      	lsls	r2, r2, #21
 8002694:	4311      	orrs	r1, r2
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800269a:	0852      	lsrs	r2, r2, #1
 800269c:	3a01      	subs	r2, #1
 800269e:	0652      	lsls	r2, r2, #25
 80026a0:	4311      	orrs	r1, r2
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026a6:	06d2      	lsls	r2, r2, #27
 80026a8:	430a      	orrs	r2, r1
 80026aa:	493f      	ldr	r1, [pc, #252]	; (80027a8 <HAL_RCC_OscConfig+0x82c>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80026b0:	4b3d      	ldr	r3, [pc, #244]	; (80027a8 <HAL_RCC_OscConfig+0x82c>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a3c      	ldr	r2, [pc, #240]	; (80027a8 <HAL_RCC_OscConfig+0x82c>)
 80026b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026bc:	4b3a      	ldr	r3, [pc, #232]	; (80027a8 <HAL_RCC_OscConfig+0x82c>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	4a39      	ldr	r2, [pc, #228]	; (80027a8 <HAL_RCC_OscConfig+0x82c>)
 80026c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026c8:	f7ff f94e 	bl	8001968 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d0:	f7ff f94a 	bl	8001968 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e067      	b.n	80027b2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026e2:	4b31      	ldr	r3, [pc, #196]	; (80027a8 <HAL_RCC_OscConfig+0x82c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0f0      	beq.n	80026d0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026ee:	e05f      	b.n	80027b0 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e05e      	b.n	80027b2 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026f4:	4b2c      	ldr	r3, [pc, #176]	; (80027a8 <HAL_RCC_OscConfig+0x82c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d157      	bne.n	80027b0 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002700:	4b29      	ldr	r3, [pc, #164]	; (80027a8 <HAL_RCC_OscConfig+0x82c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a28      	ldr	r2, [pc, #160]	; (80027a8 <HAL_RCC_OscConfig+0x82c>)
 8002706:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800270a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800270c:	4b26      	ldr	r3, [pc, #152]	; (80027a8 <HAL_RCC_OscConfig+0x82c>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	4a25      	ldr	r2, [pc, #148]	; (80027a8 <HAL_RCC_OscConfig+0x82c>)
 8002712:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002716:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002718:	f7ff f926 	bl	8001968 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002720:	f7ff f922 	bl	8001968 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e03f      	b.n	80027b2 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002732:	4b1d      	ldr	r3, [pc, #116]	; (80027a8 <HAL_RCC_OscConfig+0x82c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d0f0      	beq.n	8002720 <HAL_RCC_OscConfig+0x7a4>
 800273e:	e037      	b.n	80027b0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	2b0c      	cmp	r3, #12
 8002744:	d02d      	beq.n	80027a2 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002746:	4b18      	ldr	r3, [pc, #96]	; (80027a8 <HAL_RCC_OscConfig+0x82c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a17      	ldr	r2, [pc, #92]	; (80027a8 <HAL_RCC_OscConfig+0x82c>)
 800274c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002750:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002752:	4b15      	ldr	r3, [pc, #84]	; (80027a8 <HAL_RCC_OscConfig+0x82c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d105      	bne.n	800276a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800275e:	4b12      	ldr	r3, [pc, #72]	; (80027a8 <HAL_RCC_OscConfig+0x82c>)
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	4a11      	ldr	r2, [pc, #68]	; (80027a8 <HAL_RCC_OscConfig+0x82c>)
 8002764:	f023 0303 	bic.w	r3, r3, #3
 8002768:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800276a:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <HAL_RCC_OscConfig+0x82c>)
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	4a0e      	ldr	r2, [pc, #56]	; (80027a8 <HAL_RCC_OscConfig+0x82c>)
 8002770:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002778:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277a:	f7ff f8f5 	bl	8001968 <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002780:	e008      	b.n	8002794 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002782:	f7ff f8f1 	bl	8001968 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e00e      	b.n	80027b2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002794:	4b04      	ldr	r3, [pc, #16]	; (80027a8 <HAL_RCC_OscConfig+0x82c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1f0      	bne.n	8002782 <HAL_RCC_OscConfig+0x806>
 80027a0:	e006      	b.n	80027b0 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e005      	b.n	80027b2 <HAL_RCC_OscConfig+0x836>
 80027a6:	bf00      	nop
 80027a8:	40021000 	.word	0x40021000
 80027ac:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3720      	adds	r7, #32
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop

080027bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e0c8      	b.n	8002962 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027d0:	4b66      	ldr	r3, [pc, #408]	; (800296c <HAL_RCC_ClockConfig+0x1b0>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d910      	bls.n	8002800 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027de:	4b63      	ldr	r3, [pc, #396]	; (800296c <HAL_RCC_ClockConfig+0x1b0>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f023 0207 	bic.w	r2, r3, #7
 80027e6:	4961      	ldr	r1, [pc, #388]	; (800296c <HAL_RCC_ClockConfig+0x1b0>)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ee:	4b5f      	ldr	r3, [pc, #380]	; (800296c <HAL_RCC_ClockConfig+0x1b0>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d001      	beq.n	8002800 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e0b0      	b.n	8002962 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b00      	cmp	r3, #0
 800280a:	d04c      	beq.n	80028a6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2b03      	cmp	r3, #3
 8002812:	d107      	bne.n	8002824 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002814:	4b56      	ldr	r3, [pc, #344]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d121      	bne.n	8002864 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e09e      	b.n	8002962 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b02      	cmp	r3, #2
 800282a:	d107      	bne.n	800283c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800282c:	4b50      	ldr	r3, [pc, #320]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d115      	bne.n	8002864 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e092      	b.n	8002962 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d107      	bne.n	8002854 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002844:	4b4a      	ldr	r3, [pc, #296]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d109      	bne.n	8002864 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e086      	b.n	8002962 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002854:	4b46      	ldr	r3, [pc, #280]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e07e      	b.n	8002962 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002864:	4b42      	ldr	r3, [pc, #264]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f023 0203 	bic.w	r2, r3, #3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	493f      	ldr	r1, [pc, #252]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 8002872:	4313      	orrs	r3, r2
 8002874:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002876:	f7ff f877 	bl	8001968 <HAL_GetTick>
 800287a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287c:	e00a      	b.n	8002894 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800287e:	f7ff f873 	bl	8001968 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	f241 3288 	movw	r2, #5000	; 0x1388
 800288c:	4293      	cmp	r3, r2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e066      	b.n	8002962 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002894:	4b36      	ldr	r3, [pc, #216]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 020c 	and.w	r2, r3, #12
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d1eb      	bne.n	800287e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d008      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028b2:	4b2f      	ldr	r3, [pc, #188]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	492c      	ldr	r1, [pc, #176]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028c4:	4b29      	ldr	r3, [pc, #164]	; (800296c <HAL_RCC_ClockConfig+0x1b0>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0307 	and.w	r3, r3, #7
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d210      	bcs.n	80028f4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028d2:	4b26      	ldr	r3, [pc, #152]	; (800296c <HAL_RCC_ClockConfig+0x1b0>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f023 0207 	bic.w	r2, r3, #7
 80028da:	4924      	ldr	r1, [pc, #144]	; (800296c <HAL_RCC_ClockConfig+0x1b0>)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	4313      	orrs	r3, r2
 80028e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028e2:	4b22      	ldr	r3, [pc, #136]	; (800296c <HAL_RCC_ClockConfig+0x1b0>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d001      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e036      	b.n	8002962 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d008      	beq.n	8002912 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002900:	4b1b      	ldr	r3, [pc, #108]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	4918      	ldr	r1, [pc, #96]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 800290e:	4313      	orrs	r3, r2
 8002910:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	2b00      	cmp	r3, #0
 800291c:	d009      	beq.n	8002932 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800291e:	4b14      	ldr	r3, [pc, #80]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	4910      	ldr	r1, [pc, #64]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 800292e:	4313      	orrs	r3, r2
 8002930:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002932:	f000 f825 	bl	8002980 <HAL_RCC_GetSysClockFreq>
 8002936:	4601      	mov	r1, r0
 8002938:	4b0d      	ldr	r3, [pc, #52]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	091b      	lsrs	r3, r3, #4
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	4a0c      	ldr	r2, [pc, #48]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002944:	5cd3      	ldrb	r3, [r2, r3]
 8002946:	f003 031f 	and.w	r3, r3, #31
 800294a:	fa21 f303 	lsr.w	r3, r1, r3
 800294e:	4a0a      	ldr	r2, [pc, #40]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 8002950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002952:	4b0a      	ldr	r3, [pc, #40]	; (800297c <HAL_RCC_ClockConfig+0x1c0>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f7fe ffb6 	bl	80018c8 <HAL_InitTick>
 800295c:	4603      	mov	r3, r0
 800295e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002960:	7afb      	ldrb	r3, [r7, #11]
}
 8002962:	4618      	mov	r0, r3
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40022000 	.word	0x40022000
 8002970:	40021000 	.word	0x40021000
 8002974:	080046e0 	.word	0x080046e0
 8002978:	20000000 	.word	0x20000000
 800297c:	20000004 	.word	0x20000004

08002980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002980:	b480      	push	{r7}
 8002982:	b089      	sub	sp, #36	; 0x24
 8002984:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002986:	2300      	movs	r3, #0
 8002988:	61fb      	str	r3, [r7, #28]
 800298a:	2300      	movs	r3, #0
 800298c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800298e:	4b3d      	ldr	r3, [pc, #244]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x104>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 030c 	and.w	r3, r3, #12
 8002996:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002998:	4b3a      	ldr	r3, [pc, #232]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x104>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	f003 0303 	and.w	r3, r3, #3
 80029a0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d005      	beq.n	80029b4 <HAL_RCC_GetSysClockFreq+0x34>
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	2b0c      	cmp	r3, #12
 80029ac:	d121      	bne.n	80029f2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d11e      	bne.n	80029f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80029b4:	4b33      	ldr	r3, [pc, #204]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x104>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0308 	and.w	r3, r3, #8
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d107      	bne.n	80029d0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029c0:	4b30      	ldr	r3, [pc, #192]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x104>)
 80029c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029c6:	0a1b      	lsrs	r3, r3, #8
 80029c8:	f003 030f 	and.w	r3, r3, #15
 80029cc:	61fb      	str	r3, [r7, #28]
 80029ce:	e005      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029d0:	4b2c      	ldr	r3, [pc, #176]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x104>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	091b      	lsrs	r3, r3, #4
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80029dc:	4a2a      	ldr	r2, [pc, #168]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x108>)
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10d      	bne.n	8002a08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029f0:	e00a      	b.n	8002a08 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	2b04      	cmp	r3, #4
 80029f6:	d102      	bne.n	80029fe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029f8:	4b24      	ldr	r3, [pc, #144]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x10c>)
 80029fa:	61bb      	str	r3, [r7, #24]
 80029fc:	e004      	b.n	8002a08 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d101      	bne.n	8002a08 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a04:	4b22      	ldr	r3, [pc, #136]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a06:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	2b0c      	cmp	r3, #12
 8002a0c:	d133      	bne.n	8002a76 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a0e:	4b1d      	ldr	r3, [pc, #116]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d002      	beq.n	8002a24 <HAL_RCC_GetSysClockFreq+0xa4>
 8002a1e:	2b03      	cmp	r3, #3
 8002a20:	d003      	beq.n	8002a2a <HAL_RCC_GetSysClockFreq+0xaa>
 8002a22:	e005      	b.n	8002a30 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a24:	4b19      	ldr	r3, [pc, #100]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a26:	617b      	str	r3, [r7, #20]
      break;
 8002a28:	e005      	b.n	8002a36 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a2a:	4b19      	ldr	r3, [pc, #100]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a2c:	617b      	str	r3, [r7, #20]
      break;
 8002a2e:	e002      	b.n	8002a36 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	617b      	str	r3, [r7, #20]
      break;
 8002a34:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a36:	4b13      	ldr	r3, [pc, #76]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	091b      	lsrs	r3, r3, #4
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	3301      	adds	r3, #1
 8002a42:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a44:	4b0f      	ldr	r3, [pc, #60]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	0a1b      	lsrs	r3, r3, #8
 8002a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	fb02 f203 	mul.w	r2, r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a5a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a5c:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	0e5b      	lsrs	r3, r3, #25
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	3301      	adds	r3, #1
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a74:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a76:	69bb      	ldr	r3, [r7, #24]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3724      	adds	r7, #36	; 0x24
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	40021000 	.word	0x40021000
 8002a88:	080046f8 	.word	0x080046f8
 8002a8c:	00f42400 	.word	0x00f42400
 8002a90:	007a1200 	.word	0x007a1200

08002a94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a98:	4b03      	ldr	r3, [pc, #12]	; (8002aa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	20000000 	.word	0x20000000

08002aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ab0:	f7ff fff0 	bl	8002a94 <HAL_RCC_GetHCLKFreq>
 8002ab4:	4601      	mov	r1, r0
 8002ab6:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	0a1b      	lsrs	r3, r3, #8
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	4a04      	ldr	r2, [pc, #16]	; (8002ad4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ac2:	5cd3      	ldrb	r3, [r2, r3]
 8002ac4:	f003 031f 	and.w	r3, r3, #31
 8002ac8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	080046f0 	.word	0x080046f0

08002ad8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002adc:	f7ff ffda 	bl	8002a94 <HAL_RCC_GetHCLKFreq>
 8002ae0:	4601      	mov	r1, r0
 8002ae2:	4b06      	ldr	r3, [pc, #24]	; (8002afc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	0adb      	lsrs	r3, r3, #11
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	4a04      	ldr	r2, [pc, #16]	; (8002b00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002aee:	5cd3      	ldrb	r3, [r2, r3]
 8002af0:	f003 031f 	and.w	r3, r3, #31
 8002af4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40021000 	.word	0x40021000
 8002b00:	080046f0 	.word	0x080046f0

08002b04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b10:	4b2a      	ldr	r3, [pc, #168]	; (8002bbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b1c:	f7ff f9ca 	bl	8001eb4 <HAL_PWREx_GetVoltageRange>
 8002b20:	6178      	str	r0, [r7, #20]
 8002b22:	e014      	b.n	8002b4e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b24:	4b25      	ldr	r3, [pc, #148]	; (8002bbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b28:	4a24      	ldr	r2, [pc, #144]	; (8002bbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b2e:	6593      	str	r3, [r2, #88]	; 0x58
 8002b30:	4b22      	ldr	r3, [pc, #136]	; (8002bbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b3c:	f7ff f9ba 	bl	8001eb4 <HAL_PWREx_GetVoltageRange>
 8002b40:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b42:	4b1e      	ldr	r3, [pc, #120]	; (8002bbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b46:	4a1d      	ldr	r2, [pc, #116]	; (8002bbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b4c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b54:	d10b      	bne.n	8002b6e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b80      	cmp	r3, #128	; 0x80
 8002b5a:	d919      	bls.n	8002b90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2ba0      	cmp	r3, #160	; 0xa0
 8002b60:	d902      	bls.n	8002b68 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b62:	2302      	movs	r3, #2
 8002b64:	613b      	str	r3, [r7, #16]
 8002b66:	e013      	b.n	8002b90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b68:	2301      	movs	r3, #1
 8002b6a:	613b      	str	r3, [r7, #16]
 8002b6c:	e010      	b.n	8002b90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b80      	cmp	r3, #128	; 0x80
 8002b72:	d902      	bls.n	8002b7a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b74:	2303      	movs	r3, #3
 8002b76:	613b      	str	r3, [r7, #16]
 8002b78:	e00a      	b.n	8002b90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b80      	cmp	r3, #128	; 0x80
 8002b7e:	d102      	bne.n	8002b86 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b80:	2302      	movs	r3, #2
 8002b82:	613b      	str	r3, [r7, #16]
 8002b84:	e004      	b.n	8002b90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b70      	cmp	r3, #112	; 0x70
 8002b8a:	d101      	bne.n	8002b90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b90:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f023 0207 	bic.w	r2, r3, #7
 8002b98:	4909      	ldr	r1, [pc, #36]	; (8002bc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ba0:	4b07      	ldr	r3, [pc, #28]	; (8002bc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d001      	beq.n	8002bb2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e000      	b.n	8002bb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3718      	adds	r7, #24
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	40022000 	.word	0x40022000

08002bc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002bcc:	2300      	movs	r3, #0
 8002bce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d02f      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002be8:	d005      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002bea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002bee:	d015      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d007      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002bf4:	e00f      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002bf6:	4bac      	ldr	r3, [pc, #688]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	4aab      	ldr	r2, [pc, #684]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c00:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c02:	e00c      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3304      	adds	r3, #4
 8002c08:	2100      	movs	r1, #0
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 f9dc 	bl	8002fc8 <RCCEx_PLLSAI1_Config>
 8002c10:	4603      	mov	r3, r0
 8002c12:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c14:	e003      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	74fb      	strb	r3, [r7, #19]
      break;
 8002c1a:	e000      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8002c1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c1e:	7cfb      	ldrb	r3, [r7, #19]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10b      	bne.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c24:	4ba0      	ldr	r3, [pc, #640]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c32:	499d      	ldr	r1, [pc, #628]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c3a:	e001      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c3c:	7cfb      	ldrb	r3, [r7, #19]
 8002c3e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 8099 	beq.w	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c52:	4b95      	ldr	r3, [pc, #596]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e000      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002c62:	2300      	movs	r3, #0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00d      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c68:	4b8f      	ldr	r3, [pc, #572]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6c:	4a8e      	ldr	r2, [pc, #568]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c72:	6593      	str	r3, [r2, #88]	; 0x58
 8002c74:	4b8c      	ldr	r3, [pc, #560]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7c:	60bb      	str	r3, [r7, #8]
 8002c7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c80:	2301      	movs	r3, #1
 8002c82:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c84:	4b89      	ldr	r3, [pc, #548]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a88      	ldr	r2, [pc, #544]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c90:	f7fe fe6a 	bl	8001968 <HAL_GetTick>
 8002c94:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c96:	e009      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c98:	f7fe fe66 	bl	8001968 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d902      	bls.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	74fb      	strb	r3, [r7, #19]
        break;
 8002caa:	e005      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002cac:	4b7f      	ldr	r3, [pc, #508]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d0ef      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8002cb8:	7cfb      	ldrb	r3, [r7, #19]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d155      	bne.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002cbe:	4b7a      	ldr	r3, [pc, #488]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cc8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d01e      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d019      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cda:	4b73      	ldr	r3, [pc, #460]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ce4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ce6:	4b70      	ldr	r3, [pc, #448]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cec:	4a6e      	ldr	r2, [pc, #440]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002cee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cf6:	4b6c      	ldr	r3, [pc, #432]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfc:	4a6a      	ldr	r2, [pc, #424]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d06:	4a68      	ldr	r2, [pc, #416]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d016      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d18:	f7fe fe26 	bl	8001968 <HAL_GetTick>
 8002d1c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d1e:	e00b      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d20:	f7fe fe22 	bl	8001968 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d902      	bls.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	74fb      	strb	r3, [r7, #19]
            break;
 8002d36:	e006      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d38:	4b5b      	ldr	r3, [pc, #364]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0ec      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8002d46:	7cfb      	ldrb	r3, [r7, #19]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10b      	bne.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d4c:	4b56      	ldr	r3, [pc, #344]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d5a:	4953      	ldr	r1, [pc, #332]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d62:	e004      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d64:	7cfb      	ldrb	r3, [r7, #19]
 8002d66:	74bb      	strb	r3, [r7, #18]
 8002d68:	e001      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d6a:	7cfb      	ldrb	r3, [r7, #19]
 8002d6c:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d6e:	7c7b      	ldrb	r3, [r7, #17]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d105      	bne.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d74:	4b4c      	ldr	r3, [pc, #304]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d78:	4a4b      	ldr	r2, [pc, #300]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d7e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00a      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d8c:	4b46      	ldr	r3, [pc, #280]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d92:	f023 0203 	bic.w	r2, r3, #3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	4943      	ldr	r1, [pc, #268]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00a      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dae:	4b3e      	ldr	r3, [pc, #248]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db4:	f023 020c 	bic.w	r2, r3, #12
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	493a      	ldr	r1, [pc, #232]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0320 	and.w	r3, r3, #32
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00a      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002dd0:	4b35      	ldr	r3, [pc, #212]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dde:	4932      	ldr	r1, [pc, #200]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00a      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002df2:	4b2d      	ldr	r3, [pc, #180]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e00:	4929      	ldr	r1, [pc, #164]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00a      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e14:	4b24      	ldr	r3, [pc, #144]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e22:	4921      	ldr	r1, [pc, #132]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00a      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e36:	4b1c      	ldr	r3, [pc, #112]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e44:	4918      	ldr	r1, [pc, #96]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00a      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e58:	4b13      	ldr	r3, [pc, #76]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e5e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	4910      	ldr	r1, [pc, #64]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d02c      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e80:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e88:	4907      	ldr	r1, [pc, #28]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e98:	d10a      	bne.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e9a:	4b03      	ldr	r3, [pc, #12]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	4a02      	ldr	r2, [pc, #8]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ea0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ea4:	60d3      	str	r3, [r2, #12]
 8002ea6:	e015      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002eb8:	d10c      	bne.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f000 f881 	bl	8002fc8 <RCCEx_PLLSAI1_Config>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002eca:	7cfb      	ldrb	r3, [r7, #19]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8002ed0:	7cfb      	ldrb	r3, [r7, #19]
 8002ed2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d028      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ee0:	4b30      	ldr	r3, [pc, #192]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eee:	492d      	ldr	r1, [pc, #180]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002efe:	d106      	bne.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f00:	4b28      	ldr	r3, [pc, #160]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	4a27      	ldr	r2, [pc, #156]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f0a:	60d3      	str	r3, [r2, #12]
 8002f0c:	e011      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f16:	d10c      	bne.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	2101      	movs	r1, #1
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 f852 	bl	8002fc8 <RCCEx_PLLSAI1_Config>
 8002f24:	4603      	mov	r3, r0
 8002f26:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f28:	7cfb      	ldrb	r3, [r7, #19]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8002f2e:	7cfb      	ldrb	r3, [r7, #19]
 8002f30:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d01c      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f3e:	4b19      	ldr	r3, [pc, #100]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f44:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f4c:	4915      	ldr	r1, [pc, #84]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f5c:	d10c      	bne.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	3304      	adds	r3, #4
 8002f62:	2102      	movs	r1, #2
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 f82f 	bl	8002fc8 <RCCEx_PLLSAI1_Config>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f6e:	7cfb      	ldrb	r3, [r7, #19]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8002f74:	7cfb      	ldrb	r3, [r7, #19]
 8002f76:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00a      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f84:	4b07      	ldr	r3, [pc, #28]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f92:	4904      	ldr	r1, [pc, #16]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f9a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3718      	adds	r7, #24
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40021000 	.word	0x40021000

08002fa8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002fac:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a04      	ldr	r2, [pc, #16]	; (8002fc4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002fb2:	f043 0304 	orr.w	r3, r3, #4
 8002fb6:	6013      	str	r3, [r2, #0]
}
 8002fb8:	bf00      	nop
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	40021000 	.word	0x40021000

08002fc8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002fd6:	4b73      	ldr	r3, [pc, #460]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	f003 0303 	and.w	r3, r3, #3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d018      	beq.n	8003014 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002fe2:	4b70      	ldr	r3, [pc, #448]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	f003 0203 	and.w	r2, r3, #3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d10d      	bne.n	800300e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
       ||
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d009      	beq.n	800300e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002ffa:	4b6a      	ldr	r3, [pc, #424]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	091b      	lsrs	r3, r3, #4
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	1c5a      	adds	r2, r3, #1
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
       ||
 800300a:	429a      	cmp	r2, r3
 800300c:	d044      	beq.n	8003098 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	73fb      	strb	r3, [r7, #15]
 8003012:	e041      	b.n	8003098 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2b02      	cmp	r3, #2
 800301a:	d00c      	beq.n	8003036 <RCCEx_PLLSAI1_Config+0x6e>
 800301c:	2b03      	cmp	r3, #3
 800301e:	d013      	beq.n	8003048 <RCCEx_PLLSAI1_Config+0x80>
 8003020:	2b01      	cmp	r3, #1
 8003022:	d120      	bne.n	8003066 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003024:	4b5f      	ldr	r3, [pc, #380]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d11d      	bne.n	800306c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003034:	e01a      	b.n	800306c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003036:	4b5b      	ldr	r3, [pc, #364]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800303e:	2b00      	cmp	r3, #0
 8003040:	d116      	bne.n	8003070 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003046:	e013      	b.n	8003070 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003048:	4b56      	ldr	r3, [pc, #344]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10f      	bne.n	8003074 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003054:	4b53      	ldr	r3, [pc, #332]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d109      	bne.n	8003074 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003064:	e006      	b.n	8003074 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	73fb      	strb	r3, [r7, #15]
      break;
 800306a:	e004      	b.n	8003076 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800306c:	bf00      	nop
 800306e:	e002      	b.n	8003076 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003070:	bf00      	nop
 8003072:	e000      	b.n	8003076 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003074:	bf00      	nop
    }

    if(status == HAL_OK)
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10d      	bne.n	8003098 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800307c:	4b49      	ldr	r3, [pc, #292]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6819      	ldr	r1, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	3b01      	subs	r3, #1
 800308e:	011b      	lsls	r3, r3, #4
 8003090:	430b      	orrs	r3, r1
 8003092:	4944      	ldr	r1, [pc, #272]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003094:	4313      	orrs	r3, r2
 8003096:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003098:	7bfb      	ldrb	r3, [r7, #15]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d17c      	bne.n	8003198 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800309e:	4b41      	ldr	r3, [pc, #260]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a40      	ldr	r2, [pc, #256]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80030a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030aa:	f7fe fc5d 	bl	8001968 <HAL_GetTick>
 80030ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030b0:	e009      	b.n	80030c6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030b2:	f7fe fc59 	bl	8001968 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d902      	bls.n	80030c6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	73fb      	strb	r3, [r7, #15]
        break;
 80030c4:	e005      	b.n	80030d2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030c6:	4b37      	ldr	r3, [pc, #220]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1ef      	bne.n	80030b2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d15f      	bne.n	8003198 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d110      	bne.n	8003100 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030de:	4b31      	ldr	r3, [pc, #196]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80030e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6892      	ldr	r2, [r2, #8]
 80030ee:	0211      	lsls	r1, r2, #8
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	68d2      	ldr	r2, [r2, #12]
 80030f4:	06d2      	lsls	r2, r2, #27
 80030f6:	430a      	orrs	r2, r1
 80030f8:	492a      	ldr	r1, [pc, #168]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	610b      	str	r3, [r1, #16]
 80030fe:	e027      	b.n	8003150 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d112      	bne.n	800312c <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003106:	4b27      	ldr	r3, [pc, #156]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800310e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6892      	ldr	r2, [r2, #8]
 8003116:	0211      	lsls	r1, r2, #8
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6912      	ldr	r2, [r2, #16]
 800311c:	0852      	lsrs	r2, r2, #1
 800311e:	3a01      	subs	r2, #1
 8003120:	0552      	lsls	r2, r2, #21
 8003122:	430a      	orrs	r2, r1
 8003124:	491f      	ldr	r1, [pc, #124]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003126:	4313      	orrs	r3, r2
 8003128:	610b      	str	r3, [r1, #16]
 800312a:	e011      	b.n	8003150 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800312c:	4b1d      	ldr	r3, [pc, #116]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003134:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	6892      	ldr	r2, [r2, #8]
 800313c:	0211      	lsls	r1, r2, #8
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	6952      	ldr	r2, [r2, #20]
 8003142:	0852      	lsrs	r2, r2, #1
 8003144:	3a01      	subs	r2, #1
 8003146:	0652      	lsls	r2, r2, #25
 8003148:	430a      	orrs	r2, r1
 800314a:	4916      	ldr	r1, [pc, #88]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800314c:	4313      	orrs	r3, r2
 800314e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003150:	4b14      	ldr	r3, [pc, #80]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a13      	ldr	r2, [pc, #76]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003156:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800315a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315c:	f7fe fc04 	bl	8001968 <HAL_GetTick>
 8003160:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003162:	e009      	b.n	8003178 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003164:	f7fe fc00 	bl	8001968 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d902      	bls.n	8003178 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	73fb      	strb	r3, [r7, #15]
          break;
 8003176:	e005      	b.n	8003184 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003178:	4b0a      	ldr	r3, [pc, #40]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0ef      	beq.n	8003164 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8003184:	7bfb      	ldrb	r3, [r7, #15]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d106      	bne.n	8003198 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800318a:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800318c:	691a      	ldr	r2, [r3, #16]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	4904      	ldr	r1, [pc, #16]	; (80031a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003194:	4313      	orrs	r3, r2
 8003196:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003198:	7bfb      	ldrb	r3, [r7, #15]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	40021000 	.word	0x40021000

080031a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e049      	b.n	800324e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d106      	bne.n	80031d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7fe fa5c 	bl	800168c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3304      	adds	r3, #4
 80031e4:	4619      	mov	r1, r3
 80031e6:	4610      	mov	r0, r2
 80031e8:	f000 fa24 	bl	8003634 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
	...

08003258 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d109      	bne.n	800327c <HAL_TIM_PWM_Start+0x24>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b01      	cmp	r3, #1
 8003272:	bf14      	ite	ne
 8003274:	2301      	movne	r3, #1
 8003276:	2300      	moveq	r3, #0
 8003278:	b2db      	uxtb	r3, r3
 800327a:	e03c      	b.n	80032f6 <HAL_TIM_PWM_Start+0x9e>
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	2b04      	cmp	r3, #4
 8003280:	d109      	bne.n	8003296 <HAL_TIM_PWM_Start+0x3e>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b01      	cmp	r3, #1
 800328c:	bf14      	ite	ne
 800328e:	2301      	movne	r3, #1
 8003290:	2300      	moveq	r3, #0
 8003292:	b2db      	uxtb	r3, r3
 8003294:	e02f      	b.n	80032f6 <HAL_TIM_PWM_Start+0x9e>
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	2b08      	cmp	r3, #8
 800329a:	d109      	bne.n	80032b0 <HAL_TIM_PWM_Start+0x58>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	bf14      	ite	ne
 80032a8:	2301      	movne	r3, #1
 80032aa:	2300      	moveq	r3, #0
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	e022      	b.n	80032f6 <HAL_TIM_PWM_Start+0x9e>
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	2b0c      	cmp	r3, #12
 80032b4:	d109      	bne.n	80032ca <HAL_TIM_PWM_Start+0x72>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b01      	cmp	r3, #1
 80032c0:	bf14      	ite	ne
 80032c2:	2301      	movne	r3, #1
 80032c4:	2300      	moveq	r3, #0
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	e015      	b.n	80032f6 <HAL_TIM_PWM_Start+0x9e>
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	2b10      	cmp	r3, #16
 80032ce:	d109      	bne.n	80032e4 <HAL_TIM_PWM_Start+0x8c>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b01      	cmp	r3, #1
 80032da:	bf14      	ite	ne
 80032dc:	2301      	movne	r3, #1
 80032de:	2300      	moveq	r3, #0
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	e008      	b.n	80032f6 <HAL_TIM_PWM_Start+0x9e>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	bf14      	ite	ne
 80032f0:	2301      	movne	r3, #1
 80032f2:	2300      	moveq	r3, #0
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e07e      	b.n	80033fc <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d104      	bne.n	800330e <HAL_TIM_PWM_Start+0xb6>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800330c:	e023      	b.n	8003356 <HAL_TIM_PWM_Start+0xfe>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b04      	cmp	r3, #4
 8003312:	d104      	bne.n	800331e <HAL_TIM_PWM_Start+0xc6>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2202      	movs	r2, #2
 8003318:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800331c:	e01b      	b.n	8003356 <HAL_TIM_PWM_Start+0xfe>
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2b08      	cmp	r3, #8
 8003322:	d104      	bne.n	800332e <HAL_TIM_PWM_Start+0xd6>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800332c:	e013      	b.n	8003356 <HAL_TIM_PWM_Start+0xfe>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	2b0c      	cmp	r3, #12
 8003332:	d104      	bne.n	800333e <HAL_TIM_PWM_Start+0xe6>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2202      	movs	r2, #2
 8003338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800333c:	e00b      	b.n	8003356 <HAL_TIM_PWM_Start+0xfe>
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2b10      	cmp	r3, #16
 8003342:	d104      	bne.n	800334e <HAL_TIM_PWM_Start+0xf6>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2202      	movs	r2, #2
 8003348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800334c:	e003      	b.n	8003356 <HAL_TIM_PWM_Start+0xfe>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2202      	movs	r2, #2
 8003352:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2201      	movs	r2, #1
 800335c:	6839      	ldr	r1, [r7, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f000 fc4a 	bl	8003bf8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a26      	ldr	r2, [pc, #152]	; (8003404 <HAL_TIM_PWM_Start+0x1ac>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d009      	beq.n	8003382 <HAL_TIM_PWM_Start+0x12a>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a25      	ldr	r2, [pc, #148]	; (8003408 <HAL_TIM_PWM_Start+0x1b0>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d004      	beq.n	8003382 <HAL_TIM_PWM_Start+0x12a>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a23      	ldr	r2, [pc, #140]	; (800340c <HAL_TIM_PWM_Start+0x1b4>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d101      	bne.n	8003386 <HAL_TIM_PWM_Start+0x12e>
 8003382:	2301      	movs	r3, #1
 8003384:	e000      	b.n	8003388 <HAL_TIM_PWM_Start+0x130>
 8003386:	2300      	movs	r3, #0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d007      	beq.n	800339c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800339a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a18      	ldr	r2, [pc, #96]	; (8003404 <HAL_TIM_PWM_Start+0x1ac>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d009      	beq.n	80033ba <HAL_TIM_PWM_Start+0x162>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ae:	d004      	beq.n	80033ba <HAL_TIM_PWM_Start+0x162>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a14      	ldr	r2, [pc, #80]	; (8003408 <HAL_TIM_PWM_Start+0x1b0>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d115      	bne.n	80033e6 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689a      	ldr	r2, [r3, #8]
 80033c0:	4b13      	ldr	r3, [pc, #76]	; (8003410 <HAL_TIM_PWM_Start+0x1b8>)
 80033c2:	4013      	ands	r3, r2
 80033c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2b06      	cmp	r3, #6
 80033ca:	d015      	beq.n	80033f8 <HAL_TIM_PWM_Start+0x1a0>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d2:	d011      	beq.n	80033f8 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 0201 	orr.w	r2, r2, #1
 80033e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e4:	e008      	b.n	80033f8 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f042 0201 	orr.w	r2, r2, #1
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	e000      	b.n	80033fa <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40012c00 	.word	0x40012c00
 8003408:	40014000 	.word	0x40014000
 800340c:	40014400 	.word	0x40014400
 8003410:	00010007 	.word	0x00010007

08003414 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003426:	2b01      	cmp	r3, #1
 8003428:	d101      	bne.n	800342e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800342a:	2302      	movs	r3, #2
 800342c:	e0fd      	b.n	800362a <HAL_TIM_PWM_ConfigChannel+0x216>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2b14      	cmp	r3, #20
 800343a:	f200 80f0 	bhi.w	800361e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800343e:	a201      	add	r2, pc, #4	; (adr r2, 8003444 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003444:	08003499 	.word	0x08003499
 8003448:	0800361f 	.word	0x0800361f
 800344c:	0800361f 	.word	0x0800361f
 8003450:	0800361f 	.word	0x0800361f
 8003454:	080034d9 	.word	0x080034d9
 8003458:	0800361f 	.word	0x0800361f
 800345c:	0800361f 	.word	0x0800361f
 8003460:	0800361f 	.word	0x0800361f
 8003464:	0800351b 	.word	0x0800351b
 8003468:	0800361f 	.word	0x0800361f
 800346c:	0800361f 	.word	0x0800361f
 8003470:	0800361f 	.word	0x0800361f
 8003474:	0800355b 	.word	0x0800355b
 8003478:	0800361f 	.word	0x0800361f
 800347c:	0800361f 	.word	0x0800361f
 8003480:	0800361f 	.word	0x0800361f
 8003484:	0800359d 	.word	0x0800359d
 8003488:	0800361f 	.word	0x0800361f
 800348c:	0800361f 	.word	0x0800361f
 8003490:	0800361f 	.word	0x0800361f
 8003494:	080035dd 	.word	0x080035dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68b9      	ldr	r1, [r7, #8]
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 f92c 	bl	80036fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	699a      	ldr	r2, [r3, #24]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f042 0208 	orr.w	r2, r2, #8
 80034b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699a      	ldr	r2, [r3, #24]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 0204 	bic.w	r2, r2, #4
 80034c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6999      	ldr	r1, [r3, #24]
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	691a      	ldr	r2, [r3, #16]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	619a      	str	r2, [r3, #24]
      break;
 80034d6:	e0a3      	b.n	8003620 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68b9      	ldr	r1, [r7, #8]
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 f988 	bl	80037f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	699a      	ldr	r2, [r3, #24]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	699a      	ldr	r2, [r3, #24]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003502:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6999      	ldr	r1, [r3, #24]
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	021a      	lsls	r2, r3, #8
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	619a      	str	r2, [r3, #24]
      break;
 8003518:	e082      	b.n	8003620 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68b9      	ldr	r1, [r7, #8]
 8003520:	4618      	mov	r0, r3
 8003522:	f000 f9e1 	bl	80038e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	69da      	ldr	r2, [r3, #28]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f042 0208 	orr.w	r2, r2, #8
 8003534:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	69da      	ldr	r2, [r3, #28]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0204 	bic.w	r2, r2, #4
 8003544:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	69d9      	ldr	r1, [r3, #28]
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	691a      	ldr	r2, [r3, #16]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	430a      	orrs	r2, r1
 8003556:	61da      	str	r2, [r3, #28]
      break;
 8003558:	e062      	b.n	8003620 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68b9      	ldr	r1, [r7, #8]
 8003560:	4618      	mov	r0, r3
 8003562:	f000 fa39 	bl	80039d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	69da      	ldr	r2, [r3, #28]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003574:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	69da      	ldr	r2, [r3, #28]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003584:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	69d9      	ldr	r1, [r3, #28]
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	021a      	lsls	r2, r3, #8
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	61da      	str	r2, [r3, #28]
      break;
 800359a:	e041      	b.n	8003620 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68b9      	ldr	r1, [r7, #8]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f000 fa76 	bl	8003a94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f042 0208 	orr.w	r2, r2, #8
 80035b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0204 	bic.w	r2, r2, #4
 80035c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	691a      	ldr	r2, [r3, #16]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80035da:	e021      	b.n	8003620 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68b9      	ldr	r1, [r7, #8]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 faae 	bl	8003b44 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003606:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	021a      	lsls	r2, r3, #8
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	430a      	orrs	r2, r1
 800361a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800361c:	e000      	b.n	8003620 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800361e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop

08003634 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a2a      	ldr	r2, [pc, #168]	; (80036f0 <TIM_Base_SetConfig+0xbc>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d003      	beq.n	8003654 <TIM_Base_SetConfig+0x20>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003652:	d108      	bne.n	8003666 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800365a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	4313      	orrs	r3, r2
 8003664:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a21      	ldr	r2, [pc, #132]	; (80036f0 <TIM_Base_SetConfig+0xbc>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d00b      	beq.n	8003686 <TIM_Base_SetConfig+0x52>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003674:	d007      	beq.n	8003686 <TIM_Base_SetConfig+0x52>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a1e      	ldr	r2, [pc, #120]	; (80036f4 <TIM_Base_SetConfig+0xc0>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d003      	beq.n	8003686 <TIM_Base_SetConfig+0x52>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a1d      	ldr	r2, [pc, #116]	; (80036f8 <TIM_Base_SetConfig+0xc4>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d108      	bne.n	8003698 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800368c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	4313      	orrs	r3, r2
 8003696:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a0c      	ldr	r2, [pc, #48]	; (80036f0 <TIM_Base_SetConfig+0xbc>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d007      	beq.n	80036d4 <TIM_Base_SetConfig+0xa0>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a0b      	ldr	r2, [pc, #44]	; (80036f4 <TIM_Base_SetConfig+0xc0>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d003      	beq.n	80036d4 <TIM_Base_SetConfig+0xa0>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a0a      	ldr	r2, [pc, #40]	; (80036f8 <TIM_Base_SetConfig+0xc4>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d103      	bne.n	80036dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	691a      	ldr	r2, [r3, #16]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	615a      	str	r2, [r3, #20]
}
 80036e2:	bf00      	nop
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	40012c00 	.word	0x40012c00
 80036f4:	40014000 	.word	0x40014000
 80036f8:	40014400 	.word	0x40014400

080036fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b087      	sub	sp, #28
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	f023 0201 	bic.w	r2, r3, #1
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800372a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800372e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f023 0303 	bic.w	r3, r3, #3
 8003736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	4313      	orrs	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f023 0302 	bic.w	r3, r3, #2
 8003748:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	4313      	orrs	r3, r2
 8003752:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a24      	ldr	r2, [pc, #144]	; (80037e8 <TIM_OC1_SetConfig+0xec>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d007      	beq.n	800376c <TIM_OC1_SetConfig+0x70>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a23      	ldr	r2, [pc, #140]	; (80037ec <TIM_OC1_SetConfig+0xf0>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d003      	beq.n	800376c <TIM_OC1_SetConfig+0x70>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a22      	ldr	r2, [pc, #136]	; (80037f0 <TIM_OC1_SetConfig+0xf4>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d10c      	bne.n	8003786 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f023 0308 	bic.w	r3, r3, #8
 8003772:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	4313      	orrs	r3, r2
 800377c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f023 0304 	bic.w	r3, r3, #4
 8003784:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a17      	ldr	r2, [pc, #92]	; (80037e8 <TIM_OC1_SetConfig+0xec>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d007      	beq.n	800379e <TIM_OC1_SetConfig+0xa2>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a16      	ldr	r2, [pc, #88]	; (80037ec <TIM_OC1_SetConfig+0xf0>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d003      	beq.n	800379e <TIM_OC1_SetConfig+0xa2>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a15      	ldr	r2, [pc, #84]	; (80037f0 <TIM_OC1_SetConfig+0xf4>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d111      	bne.n	80037c2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	4313      	orrs	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	621a      	str	r2, [r3, #32]
}
 80037dc:	bf00      	nop
 80037de:	371c      	adds	r7, #28
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	40012c00 	.word	0x40012c00
 80037ec:	40014000 	.word	0x40014000
 80037f0:	40014400 	.word	0x40014400

080037f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b087      	sub	sp, #28
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	f023 0210 	bic.w	r2, r3, #16
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003822:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800382e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	021b      	lsls	r3, r3, #8
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	4313      	orrs	r3, r2
 800383a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	f023 0320 	bic.w	r3, r3, #32
 8003842:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	4313      	orrs	r3, r2
 800384e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a22      	ldr	r2, [pc, #136]	; (80038dc <TIM_OC2_SetConfig+0xe8>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d10d      	bne.n	8003874 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800385e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	4313      	orrs	r3, r2
 800386a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003872:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a19      	ldr	r2, [pc, #100]	; (80038dc <TIM_OC2_SetConfig+0xe8>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d007      	beq.n	800388c <TIM_OC2_SetConfig+0x98>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a18      	ldr	r2, [pc, #96]	; (80038e0 <TIM_OC2_SetConfig+0xec>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d003      	beq.n	800388c <TIM_OC2_SetConfig+0x98>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a17      	ldr	r2, [pc, #92]	; (80038e4 <TIM_OC2_SetConfig+0xf0>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d113      	bne.n	80038b4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003892:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800389a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	621a      	str	r2, [r3, #32]
}
 80038ce:	bf00      	nop
 80038d0:	371c      	adds	r7, #28
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	40012c00 	.word	0x40012c00
 80038e0:	40014000 	.word	0x40014000
 80038e4:	40014400 	.word	0x40014400

080038e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b087      	sub	sp, #28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800391a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f023 0303 	bic.w	r3, r3, #3
 8003922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	4313      	orrs	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003934:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	021b      	lsls	r3, r3, #8
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	4313      	orrs	r3, r2
 8003940:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a21      	ldr	r2, [pc, #132]	; (80039cc <TIM_OC3_SetConfig+0xe4>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d10d      	bne.n	8003966 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003950:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	021b      	lsls	r3, r3, #8
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	4313      	orrs	r3, r2
 800395c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003964:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a18      	ldr	r2, [pc, #96]	; (80039cc <TIM_OC3_SetConfig+0xe4>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d007      	beq.n	800397e <TIM_OC3_SetConfig+0x96>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a17      	ldr	r2, [pc, #92]	; (80039d0 <TIM_OC3_SetConfig+0xe8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d003      	beq.n	800397e <TIM_OC3_SetConfig+0x96>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a16      	ldr	r2, [pc, #88]	; (80039d4 <TIM_OC3_SetConfig+0xec>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d113      	bne.n	80039a6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003984:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800398c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4313      	orrs	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	011b      	lsls	r3, r3, #4
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	621a      	str	r2, [r3, #32]
}
 80039c0:	bf00      	nop
 80039c2:	371c      	adds	r7, #28
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	40012c00 	.word	0x40012c00
 80039d0:	40014000 	.word	0x40014000
 80039d4:	40014400 	.word	0x40014400

080039d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039d8:	b480      	push	{r7}
 80039da:	b087      	sub	sp, #28
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	021b      	lsls	r3, r3, #8
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	031b      	lsls	r3, r3, #12
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a14      	ldr	r2, [pc, #80]	; (8003a88 <TIM_OC4_SetConfig+0xb0>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d007      	beq.n	8003a4c <TIM_OC4_SetConfig+0x74>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a13      	ldr	r2, [pc, #76]	; (8003a8c <TIM_OC4_SetConfig+0xb4>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d003      	beq.n	8003a4c <TIM_OC4_SetConfig+0x74>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a12      	ldr	r2, [pc, #72]	; (8003a90 <TIM_OC4_SetConfig+0xb8>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d109      	bne.n	8003a60 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	019b      	lsls	r3, r3, #6
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	621a      	str	r2, [r3, #32]
}
 8003a7a:	bf00      	nop
 8003a7c:	371c      	adds	r7, #28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	40012c00 	.word	0x40012c00
 8003a8c:	40014000 	.word	0x40014000
 8003a90:	40014400 	.word	0x40014400

08003a94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b087      	sub	sp, #28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003ad8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	041b      	lsls	r3, r3, #16
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a13      	ldr	r2, [pc, #76]	; (8003b38 <TIM_OC5_SetConfig+0xa4>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d007      	beq.n	8003afe <TIM_OC5_SetConfig+0x6a>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a12      	ldr	r2, [pc, #72]	; (8003b3c <TIM_OC5_SetConfig+0xa8>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d003      	beq.n	8003afe <TIM_OC5_SetConfig+0x6a>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a11      	ldr	r2, [pc, #68]	; (8003b40 <TIM_OC5_SetConfig+0xac>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d109      	bne.n	8003b12 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	021b      	lsls	r3, r3, #8
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	621a      	str	r2, [r3, #32]
}
 8003b2c:	bf00      	nop
 8003b2e:	371c      	adds	r7, #28
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	40012c00 	.word	0x40012c00
 8003b3c:	40014000 	.word	0x40014000
 8003b40:	40014400 	.word	0x40014400

08003b44 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b087      	sub	sp, #28
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	021b      	lsls	r3, r3, #8
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	051b      	lsls	r3, r3, #20
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a14      	ldr	r2, [pc, #80]	; (8003bec <TIM_OC6_SetConfig+0xa8>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d007      	beq.n	8003bb0 <TIM_OC6_SetConfig+0x6c>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a13      	ldr	r2, [pc, #76]	; (8003bf0 <TIM_OC6_SetConfig+0xac>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d003      	beq.n	8003bb0 <TIM_OC6_SetConfig+0x6c>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a12      	ldr	r2, [pc, #72]	; (8003bf4 <TIM_OC6_SetConfig+0xb0>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d109      	bne.n	8003bc4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	029b      	lsls	r3, r3, #10
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	621a      	str	r2, [r3, #32]
}
 8003bde:	bf00      	nop
 8003be0:	371c      	adds	r7, #28
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	40012c00 	.word	0x40012c00
 8003bf0:	40014000 	.word	0x40014000
 8003bf4:	40014400 	.word	0x40014400

08003bf8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b087      	sub	sp, #28
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	f003 031f 	and.w	r3, r3, #31
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6a1a      	ldr	r2, [r3, #32]
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	401a      	ands	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6a1a      	ldr	r2, [r3, #32]
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	f003 031f 	and.w	r3, r3, #31
 8003c2a:	6879      	ldr	r1, [r7, #4]
 8003c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c30:	431a      	orrs	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	621a      	str	r2, [r3, #32]
}
 8003c36:	bf00      	nop
 8003c38:	371c      	adds	r7, #28
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
	...

08003c44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d101      	bne.n	8003c5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	e04f      	b.n	8003cfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2202      	movs	r2, #2
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a21      	ldr	r2, [pc, #132]	; (8003d08 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d108      	bne.n	8003c98 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003c8c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a14      	ldr	r2, [pc, #80]	; (8003d08 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d009      	beq.n	8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc4:	d004      	beq.n	8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a10      	ldr	r2, [pc, #64]	; (8003d0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d10c      	bne.n	8003cea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cd6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68ba      	ldr	r2, [r7, #8]
 8003ce8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3714      	adds	r7, #20
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	40012c00 	.word	0x40012c00
 8003d0c:	40014000 	.word	0x40014000

08003d10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d101      	bne.n	8003d2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003d28:	2302      	movs	r3, #2
 8003d2a:	e060      	b.n	8003dee <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d92:	4313      	orrs	r3, r2
 8003d94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	041b      	lsls	r3, r3, #16
 8003da2:	4313      	orrs	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a14      	ldr	r2, [pc, #80]	; (8003dfc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d115      	bne.n	8003ddc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	051b      	lsls	r3, r3, #20
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3714      	adds	r7, #20
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	40012c00 	.word	0x40012c00

08003e00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e040      	b.n	8003e94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d106      	bne.n	8003e28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7fd fcba 	bl	800179c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2224      	movs	r2, #36	; 0x24
 8003e2c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 0201 	bic.w	r2, r2, #1
 8003e3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f82c 	bl	8003e9c <UART_SetConfig>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d101      	bne.n	8003e4e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e022      	b.n	8003e94 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d002      	beq.n	8003e5c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 fa30 	bl	80042bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689a      	ldr	r2, [r3, #8]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0201 	orr.w	r2, r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 fab7 	bl	8004400 <UART_CheckIdleState>
 8003e92:	4603      	mov	r3, r0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3708      	adds	r7, #8
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e9c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003ea0:	b088      	sub	sp, #32
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689a      	ldr	r2, [r3, #8]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	695b      	ldr	r3, [r3, #20]
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	4bb0      	ldr	r3, [pc, #704]	; (800418c <UART_SetConfig+0x2f0>)
 8003eca:	4013      	ands	r3, r2
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	6812      	ldr	r2, [r2, #0]
 8003ed0:	69f9      	ldr	r1, [r7, #28]
 8003ed2:	430b      	orrs	r3, r1
 8003ed4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68da      	ldr	r2, [r3, #12]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4aa6      	ldr	r2, [pc, #664]	; (8004190 <UART_SetConfig+0x2f4>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d004      	beq.n	8003f06 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	69fa      	ldr	r2, [r7, #28]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	69fa      	ldr	r2, [r7, #28]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a9d      	ldr	r2, [pc, #628]	; (8004194 <UART_SetConfig+0x2f8>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d121      	bne.n	8003f68 <UART_SetConfig+0xcc>
 8003f24:	4b9c      	ldr	r3, [pc, #624]	; (8004198 <UART_SetConfig+0x2fc>)
 8003f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	2b03      	cmp	r3, #3
 8003f30:	d816      	bhi.n	8003f60 <UART_SetConfig+0xc4>
 8003f32:	a201      	add	r2, pc, #4	; (adr r2, 8003f38 <UART_SetConfig+0x9c>)
 8003f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f38:	08003f49 	.word	0x08003f49
 8003f3c:	08003f55 	.word	0x08003f55
 8003f40:	08003f4f 	.word	0x08003f4f
 8003f44:	08003f5b 	.word	0x08003f5b
 8003f48:	2301      	movs	r3, #1
 8003f4a:	76fb      	strb	r3, [r7, #27]
 8003f4c:	e072      	b.n	8004034 <UART_SetConfig+0x198>
 8003f4e:	2302      	movs	r3, #2
 8003f50:	76fb      	strb	r3, [r7, #27]
 8003f52:	e06f      	b.n	8004034 <UART_SetConfig+0x198>
 8003f54:	2304      	movs	r3, #4
 8003f56:	76fb      	strb	r3, [r7, #27]
 8003f58:	e06c      	b.n	8004034 <UART_SetConfig+0x198>
 8003f5a:	2308      	movs	r3, #8
 8003f5c:	76fb      	strb	r3, [r7, #27]
 8003f5e:	e069      	b.n	8004034 <UART_SetConfig+0x198>
 8003f60:	2310      	movs	r3, #16
 8003f62:	76fb      	strb	r3, [r7, #27]
 8003f64:	bf00      	nop
 8003f66:	e065      	b.n	8004034 <UART_SetConfig+0x198>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a8b      	ldr	r2, [pc, #556]	; (800419c <UART_SetConfig+0x300>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d134      	bne.n	8003fdc <UART_SetConfig+0x140>
 8003f72:	4b89      	ldr	r3, [pc, #548]	; (8004198 <UART_SetConfig+0x2fc>)
 8003f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f78:	f003 030c 	and.w	r3, r3, #12
 8003f7c:	2b0c      	cmp	r3, #12
 8003f7e:	d829      	bhi.n	8003fd4 <UART_SetConfig+0x138>
 8003f80:	a201      	add	r2, pc, #4	; (adr r2, 8003f88 <UART_SetConfig+0xec>)
 8003f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f86:	bf00      	nop
 8003f88:	08003fbd 	.word	0x08003fbd
 8003f8c:	08003fd5 	.word	0x08003fd5
 8003f90:	08003fd5 	.word	0x08003fd5
 8003f94:	08003fd5 	.word	0x08003fd5
 8003f98:	08003fc9 	.word	0x08003fc9
 8003f9c:	08003fd5 	.word	0x08003fd5
 8003fa0:	08003fd5 	.word	0x08003fd5
 8003fa4:	08003fd5 	.word	0x08003fd5
 8003fa8:	08003fc3 	.word	0x08003fc3
 8003fac:	08003fd5 	.word	0x08003fd5
 8003fb0:	08003fd5 	.word	0x08003fd5
 8003fb4:	08003fd5 	.word	0x08003fd5
 8003fb8:	08003fcf 	.word	0x08003fcf
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	76fb      	strb	r3, [r7, #27]
 8003fc0:	e038      	b.n	8004034 <UART_SetConfig+0x198>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	76fb      	strb	r3, [r7, #27]
 8003fc6:	e035      	b.n	8004034 <UART_SetConfig+0x198>
 8003fc8:	2304      	movs	r3, #4
 8003fca:	76fb      	strb	r3, [r7, #27]
 8003fcc:	e032      	b.n	8004034 <UART_SetConfig+0x198>
 8003fce:	2308      	movs	r3, #8
 8003fd0:	76fb      	strb	r3, [r7, #27]
 8003fd2:	e02f      	b.n	8004034 <UART_SetConfig+0x198>
 8003fd4:	2310      	movs	r3, #16
 8003fd6:	76fb      	strb	r3, [r7, #27]
 8003fd8:	bf00      	nop
 8003fda:	e02b      	b.n	8004034 <UART_SetConfig+0x198>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a6b      	ldr	r2, [pc, #428]	; (8004190 <UART_SetConfig+0x2f4>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d124      	bne.n	8004030 <UART_SetConfig+0x194>
 8003fe6:	4b6c      	ldr	r3, [pc, #432]	; (8004198 <UART_SetConfig+0x2fc>)
 8003fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ff4:	d012      	beq.n	800401c <UART_SetConfig+0x180>
 8003ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ffa:	d802      	bhi.n	8004002 <UART_SetConfig+0x166>
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d007      	beq.n	8004010 <UART_SetConfig+0x174>
 8004000:	e012      	b.n	8004028 <UART_SetConfig+0x18c>
 8004002:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004006:	d006      	beq.n	8004016 <UART_SetConfig+0x17a>
 8004008:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800400c:	d009      	beq.n	8004022 <UART_SetConfig+0x186>
 800400e:	e00b      	b.n	8004028 <UART_SetConfig+0x18c>
 8004010:	2300      	movs	r3, #0
 8004012:	76fb      	strb	r3, [r7, #27]
 8004014:	e00e      	b.n	8004034 <UART_SetConfig+0x198>
 8004016:	2302      	movs	r3, #2
 8004018:	76fb      	strb	r3, [r7, #27]
 800401a:	e00b      	b.n	8004034 <UART_SetConfig+0x198>
 800401c:	2304      	movs	r3, #4
 800401e:	76fb      	strb	r3, [r7, #27]
 8004020:	e008      	b.n	8004034 <UART_SetConfig+0x198>
 8004022:	2308      	movs	r3, #8
 8004024:	76fb      	strb	r3, [r7, #27]
 8004026:	e005      	b.n	8004034 <UART_SetConfig+0x198>
 8004028:	2310      	movs	r3, #16
 800402a:	76fb      	strb	r3, [r7, #27]
 800402c:	bf00      	nop
 800402e:	e001      	b.n	8004034 <UART_SetConfig+0x198>
 8004030:	2310      	movs	r3, #16
 8004032:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a55      	ldr	r2, [pc, #340]	; (8004190 <UART_SetConfig+0x2f4>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d174      	bne.n	8004128 <UART_SetConfig+0x28c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800403e:	7efb      	ldrb	r3, [r7, #27]
 8004040:	2b08      	cmp	r3, #8
 8004042:	d824      	bhi.n	800408e <UART_SetConfig+0x1f2>
 8004044:	a201      	add	r2, pc, #4	; (adr r2, 800404c <UART_SetConfig+0x1b0>)
 8004046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404a:	bf00      	nop
 800404c:	08004071 	.word	0x08004071
 8004050:	0800408f 	.word	0x0800408f
 8004054:	08004079 	.word	0x08004079
 8004058:	0800408f 	.word	0x0800408f
 800405c:	0800407f 	.word	0x0800407f
 8004060:	0800408f 	.word	0x0800408f
 8004064:	0800408f 	.word	0x0800408f
 8004068:	0800408f 	.word	0x0800408f
 800406c:	08004087 	.word	0x08004087
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004070:	f7fe fd1c 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8004074:	6178      	str	r0, [r7, #20]
        break;
 8004076:	e00f      	b.n	8004098 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004078:	4b49      	ldr	r3, [pc, #292]	; (80041a0 <UART_SetConfig+0x304>)
 800407a:	617b      	str	r3, [r7, #20]
        break;
 800407c:	e00c      	b.n	8004098 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800407e:	f7fe fc7f 	bl	8002980 <HAL_RCC_GetSysClockFreq>
 8004082:	6178      	str	r0, [r7, #20]
        break;
 8004084:	e008      	b.n	8004098 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004086:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800408a:	617b      	str	r3, [r7, #20]
        break;
 800408c:	e004      	b.n	8004098 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 800408e:	2300      	movs	r3, #0
 8004090:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	76bb      	strb	r3, [r7, #26]
        break;
 8004096:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	2b00      	cmp	r3, #0
 800409c:	f000 8100 	beq.w	80042a0 <UART_SetConfig+0x404>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	4613      	mov	r3, r2
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	4413      	add	r3, r2
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d305      	bcc.n	80040bc <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d902      	bls.n	80040c2 <UART_SetConfig+0x226>
      {
        ret = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	76bb      	strb	r3, [r7, #26]
 80040c0:	e0ee      	b.n	80042a0 <UART_SetConfig+0x404>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	4619      	mov	r1, r3
 80040c6:	f04f 0200 	mov.w	r2, #0
 80040ca:	f04f 0300 	mov.w	r3, #0
 80040ce:	f04f 0400 	mov.w	r4, #0
 80040d2:	0214      	lsls	r4, r2, #8
 80040d4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80040d8:	020b      	lsls	r3, r1, #8
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6852      	ldr	r2, [r2, #4]
 80040de:	0852      	lsrs	r2, r2, #1
 80040e0:	4611      	mov	r1, r2
 80040e2:	f04f 0200 	mov.w	r2, #0
 80040e6:	eb13 0b01 	adds.w	fp, r3, r1
 80040ea:	eb44 0c02 	adc.w	ip, r4, r2
 80040ee:	4658      	mov	r0, fp
 80040f0:	4661      	mov	r1, ip
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f04f 0400 	mov.w	r4, #0
 80040fa:	461a      	mov	r2, r3
 80040fc:	4623      	mov	r3, r4
 80040fe:	f7fc fc53 	bl	80009a8 <__aeabi_uldivmod>
 8004102:	4603      	mov	r3, r0
 8004104:	460c      	mov	r4, r1
 8004106:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800410e:	d308      	bcc.n	8004122 <UART_SetConfig+0x286>
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004116:	d204      	bcs.n	8004122 <UART_SetConfig+0x286>
        {
          huart->Instance->BRR = usartdiv;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	60da      	str	r2, [r3, #12]
 8004120:	e0be      	b.n	80042a0 <UART_SetConfig+0x404>
        }
        else
        {
          ret = HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	76bb      	strb	r3, [r7, #26]
 8004126:	e0bb      	b.n	80042a0 <UART_SetConfig+0x404>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	69db      	ldr	r3, [r3, #28]
 800412c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004130:	d169      	bne.n	8004206 <UART_SetConfig+0x36a>
  {
    switch (clocksource)
 8004132:	7efb      	ldrb	r3, [r7, #27]
 8004134:	2b08      	cmp	r3, #8
 8004136:	d835      	bhi.n	80041a4 <UART_SetConfig+0x308>
 8004138:	a201      	add	r2, pc, #4	; (adr r2, 8004140 <UART_SetConfig+0x2a4>)
 800413a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800413e:	bf00      	nop
 8004140:	08004165 	.word	0x08004165
 8004144:	0800416d 	.word	0x0800416d
 8004148:	08004175 	.word	0x08004175
 800414c:	080041a5 	.word	0x080041a5
 8004150:	0800417b 	.word	0x0800417b
 8004154:	080041a5 	.word	0x080041a5
 8004158:	080041a5 	.word	0x080041a5
 800415c:	080041a5 	.word	0x080041a5
 8004160:	08004183 	.word	0x08004183
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004164:	f7fe fca2 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8004168:	6178      	str	r0, [r7, #20]
        break;
 800416a:	e020      	b.n	80041ae <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800416c:	f7fe fcb4 	bl	8002ad8 <HAL_RCC_GetPCLK2Freq>
 8004170:	6178      	str	r0, [r7, #20]
        break;
 8004172:	e01c      	b.n	80041ae <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004174:	4b0a      	ldr	r3, [pc, #40]	; (80041a0 <UART_SetConfig+0x304>)
 8004176:	617b      	str	r3, [r7, #20]
        break;
 8004178:	e019      	b.n	80041ae <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800417a:	f7fe fc01 	bl	8002980 <HAL_RCC_GetSysClockFreq>
 800417e:	6178      	str	r0, [r7, #20]
        break;
 8004180:	e015      	b.n	80041ae <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004186:	617b      	str	r3, [r7, #20]
        break;
 8004188:	e011      	b.n	80041ae <UART_SetConfig+0x312>
 800418a:	bf00      	nop
 800418c:	efff69f3 	.word	0xefff69f3
 8004190:	40008000 	.word	0x40008000
 8004194:	40013800 	.word	0x40013800
 8004198:	40021000 	.word	0x40021000
 800419c:	40004400 	.word	0x40004400
 80041a0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80041a4:	2300      	movs	r3, #0
 80041a6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	76bb      	strb	r3, [r7, #26]
        break;
 80041ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d075      	beq.n	80042a0 <UART_SetConfig+0x404>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	005a      	lsls	r2, r3, #1
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	085b      	lsrs	r3, r3, #1
 80041be:	441a      	add	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	2b0f      	cmp	r3, #15
 80041d0:	d916      	bls.n	8004200 <UART_SetConfig+0x364>
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041d8:	d212      	bcs.n	8004200 <UART_SetConfig+0x364>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	b29b      	uxth	r3, r3
 80041de:	f023 030f 	bic.w	r3, r3, #15
 80041e2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	085b      	lsrs	r3, r3, #1
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	f003 0307 	and.w	r3, r3, #7
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	89fb      	ldrh	r3, [r7, #14]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	89fa      	ldrh	r2, [r7, #14]
 80041fc:	60da      	str	r2, [r3, #12]
 80041fe:	e04f      	b.n	80042a0 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	76bb      	strb	r3, [r7, #26]
 8004204:	e04c      	b.n	80042a0 <UART_SetConfig+0x404>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004206:	7efb      	ldrb	r3, [r7, #27]
 8004208:	2b08      	cmp	r3, #8
 800420a:	d828      	bhi.n	800425e <UART_SetConfig+0x3c2>
 800420c:	a201      	add	r2, pc, #4	; (adr r2, 8004214 <UART_SetConfig+0x378>)
 800420e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004212:	bf00      	nop
 8004214:	08004239 	.word	0x08004239
 8004218:	08004241 	.word	0x08004241
 800421c:	08004249 	.word	0x08004249
 8004220:	0800425f 	.word	0x0800425f
 8004224:	0800424f 	.word	0x0800424f
 8004228:	0800425f 	.word	0x0800425f
 800422c:	0800425f 	.word	0x0800425f
 8004230:	0800425f 	.word	0x0800425f
 8004234:	08004257 	.word	0x08004257
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004238:	f7fe fc38 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 800423c:	6178      	str	r0, [r7, #20]
        break;
 800423e:	e013      	b.n	8004268 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004240:	f7fe fc4a 	bl	8002ad8 <HAL_RCC_GetPCLK2Freq>
 8004244:	6178      	str	r0, [r7, #20]
        break;
 8004246:	e00f      	b.n	8004268 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004248:	4b1b      	ldr	r3, [pc, #108]	; (80042b8 <UART_SetConfig+0x41c>)
 800424a:	617b      	str	r3, [r7, #20]
        break;
 800424c:	e00c      	b.n	8004268 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800424e:	f7fe fb97 	bl	8002980 <HAL_RCC_GetSysClockFreq>
 8004252:	6178      	str	r0, [r7, #20]
        break;
 8004254:	e008      	b.n	8004268 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004256:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800425a:	617b      	str	r3, [r7, #20]
        break;
 800425c:	e004      	b.n	8004268 <UART_SetConfig+0x3cc>
      default:
        pclk = 0U;
 800425e:	2300      	movs	r3, #0
 8004260:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	76bb      	strb	r3, [r7, #26]
        break;
 8004266:	bf00      	nop
    }

    if (pclk != 0U)
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d018      	beq.n	80042a0 <UART_SetConfig+0x404>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	085a      	lsrs	r2, r3, #1
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	441a      	add	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004280:	b29b      	uxth	r3, r3
 8004282:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	2b0f      	cmp	r3, #15
 8004288:	d908      	bls.n	800429c <UART_SetConfig+0x400>
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004290:	d204      	bcs.n	800429c <UART_SetConfig+0x400>
      {
        huart->Instance->BRR = usartdiv;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	60da      	str	r2, [r3, #12]
 800429a:	e001      	b.n	80042a0 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80042ac:	7ebb      	ldrb	r3, [r7, #26]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3720      	adds	r7, #32
 80042b2:	46bd      	mov	sp, r7
 80042b4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80042b8:	00f42400 	.word	0x00f42400

080042bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00a      	beq.n	80042e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00a      	beq.n	8004308 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	430a      	orrs	r2, r1
 8004306:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00a      	beq.n	800432a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432e:	f003 0308 	and.w	r3, r3, #8
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00a      	beq.n	800434c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004350:	f003 0310 	and.w	r3, r3, #16
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00a      	beq.n	800436e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	f003 0320 	and.w	r3, r3, #32
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00a      	beq.n	8004390 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	430a      	orrs	r2, r1
 800438e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004398:	2b00      	cmp	r3, #0
 800439a:	d01a      	beq.n	80043d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043ba:	d10a      	bne.n	80043d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00a      	beq.n	80043f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	430a      	orrs	r2, r1
 80043f2:	605a      	str	r2, [r3, #4]
  }
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af02      	add	r7, sp, #8
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800440e:	f7fd faab 	bl	8001968 <HAL_GetTick>
 8004412:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	2b08      	cmp	r3, #8
 8004420:	d10e      	bne.n	8004440 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004422:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004426:	9300      	str	r3, [sp, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f82a 	bl	800448a <UART_WaitOnFlagUntilTimeout>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e020      	b.n	8004482 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0304 	and.w	r3, r3, #4
 800444a:	2b04      	cmp	r3, #4
 800444c:	d10e      	bne.n	800446c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800444e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004452:	9300      	str	r3, [sp, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f814 	bl	800448a <UART_WaitOnFlagUntilTimeout>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d001      	beq.n	800446c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e00a      	b.n	8004482 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2220      	movs	r2, #32
 8004470:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2220      	movs	r2, #32
 8004476:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b084      	sub	sp, #16
 800448e:	af00      	add	r7, sp, #0
 8004490:	60f8      	str	r0, [r7, #12]
 8004492:	60b9      	str	r1, [r7, #8]
 8004494:	603b      	str	r3, [r7, #0]
 8004496:	4613      	mov	r3, r2
 8004498:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800449a:	e05d      	b.n	8004558 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a2:	d059      	beq.n	8004558 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044a4:	f7fd fa60 	bl	8001968 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d302      	bcc.n	80044ba <UART_WaitOnFlagUntilTimeout+0x30>
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d11b      	bne.n	80044f2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80044c8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f022 0201 	bic.w	r2, r2, #1
 80044d8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2220      	movs	r2, #32
 80044de:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2220      	movs	r2, #32
 80044e4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e042      	b.n	8004578 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d02b      	beq.n	8004558 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	69db      	ldr	r3, [r3, #28]
 8004506:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800450a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800450e:	d123      	bne.n	8004558 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004518:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004528:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 0201 	bic.w	r2, r2, #1
 8004538:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2220      	movs	r2, #32
 800453e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2220      	movs	r2, #32
 8004544:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2220      	movs	r2, #32
 800454a:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e00f      	b.n	8004578 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	69da      	ldr	r2, [r3, #28]
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	4013      	ands	r3, r2
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	429a      	cmp	r2, r3
 8004566:	bf0c      	ite	eq
 8004568:	2301      	moveq	r3, #1
 800456a:	2300      	movne	r3, #0
 800456c:	b2db      	uxtb	r3, r3
 800456e:	461a      	mov	r2, r3
 8004570:	79fb      	ldrb	r3, [r7, #7]
 8004572:	429a      	cmp	r2, r3
 8004574:	d092      	beq.n	800449c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <__libc_init_array>:
 8004580:	b570      	push	{r4, r5, r6, lr}
 8004582:	4e0d      	ldr	r6, [pc, #52]	; (80045b8 <__libc_init_array+0x38>)
 8004584:	4c0d      	ldr	r4, [pc, #52]	; (80045bc <__libc_init_array+0x3c>)
 8004586:	1ba4      	subs	r4, r4, r6
 8004588:	10a4      	asrs	r4, r4, #2
 800458a:	2500      	movs	r5, #0
 800458c:	42a5      	cmp	r5, r4
 800458e:	d109      	bne.n	80045a4 <__libc_init_array+0x24>
 8004590:	4e0b      	ldr	r6, [pc, #44]	; (80045c0 <__libc_init_array+0x40>)
 8004592:	4c0c      	ldr	r4, [pc, #48]	; (80045c4 <__libc_init_array+0x44>)
 8004594:	f000 f820 	bl	80045d8 <_init>
 8004598:	1ba4      	subs	r4, r4, r6
 800459a:	10a4      	asrs	r4, r4, #2
 800459c:	2500      	movs	r5, #0
 800459e:	42a5      	cmp	r5, r4
 80045a0:	d105      	bne.n	80045ae <__libc_init_array+0x2e>
 80045a2:	bd70      	pop	{r4, r5, r6, pc}
 80045a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045a8:	4798      	blx	r3
 80045aa:	3501      	adds	r5, #1
 80045ac:	e7ee      	b.n	800458c <__libc_init_array+0xc>
 80045ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045b2:	4798      	blx	r3
 80045b4:	3501      	adds	r5, #1
 80045b6:	e7f2      	b.n	800459e <__libc_init_array+0x1e>
 80045b8:	08004730 	.word	0x08004730
 80045bc:	08004730 	.word	0x08004730
 80045c0:	08004730 	.word	0x08004730
 80045c4:	08004734 	.word	0x08004734

080045c8 <memset>:
 80045c8:	4402      	add	r2, r0
 80045ca:	4603      	mov	r3, r0
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d100      	bne.n	80045d2 <memset+0xa>
 80045d0:	4770      	bx	lr
 80045d2:	f803 1b01 	strb.w	r1, [r3], #1
 80045d6:	e7f9      	b.n	80045cc <memset+0x4>

080045d8 <_init>:
 80045d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045da:	bf00      	nop
 80045dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045de:	bc08      	pop	{r3}
 80045e0:	469e      	mov	lr, r3
 80045e2:	4770      	bx	lr

080045e4 <_fini>:
 80045e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e6:	bf00      	nop
 80045e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ea:	bc08      	pop	{r3}
 80045ec:	469e      	mov	lr, r3
 80045ee:	4770      	bx	lr
